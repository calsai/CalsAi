
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Food
 * 
 */
export type Food = $Result.DefaultSelection<Prisma.$FoodPayload>
/**
 * Model FoodEntry
 * 
 */
export type FoodEntry = $Result.DefaultSelection<Prisma.$FoodEntryPayload>
/**
 * Model ScannedProduct
 * 
 */
export type ScannedProduct = $Result.DefaultSelection<Prisma.$ScannedProductPayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>
/**
 * Model FavoriteRecipe
 * 
 */
export type FavoriteRecipe = $Result.DefaultSelection<Prisma.$FavoriteRecipePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.food`: Exposes CRUD operations for the **Food** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foods
    * const foods = await prisma.food.findMany()
    * ```
    */
  get food(): Prisma.FoodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodEntry`: Exposes CRUD operations for the **FoodEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodEntries
    * const foodEntries = await prisma.foodEntry.findMany()
    * ```
    */
  get foodEntry(): Prisma.FoodEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scannedProduct`: Exposes CRUD operations for the **ScannedProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScannedProducts
    * const scannedProducts = await prisma.scannedProduct.findMany()
    * ```
    */
  get scannedProduct(): Prisma.ScannedProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.favoriteRecipe`: Exposes CRUD operations for the **FavoriteRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteRecipes
    * const favoriteRecipes = await prisma.favoriteRecipe.findMany()
    * ```
    */
  get favoriteRecipe(): Prisma.FavoriteRecipeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Food: 'Food',
    FoodEntry: 'FoodEntry',
    ScannedProduct: 'ScannedProduct',
    Recipe: 'Recipe',
    FavoriteRecipe: 'FavoriteRecipe'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "food" | "foodEntry" | "scannedProduct" | "recipe" | "favoriteRecipe"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Food: {
        payload: Prisma.$FoodPayload<ExtArgs>
        fields: Prisma.FoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findFirst: {
            args: Prisma.FoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findMany: {
            args: Prisma.FoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          create: {
            args: Prisma.FoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          createMany: {
            args: Prisma.FoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          delete: {
            args: Prisma.FoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          update: {
            args: Prisma.FoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          deleteMany: {
            args: Prisma.FoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          upsert: {
            args: Prisma.FoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          aggregate: {
            args: Prisma.FoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFood>
          }
          groupBy: {
            args: Prisma.FoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodCountArgs<ExtArgs>
            result: $Utils.Optional<FoodCountAggregateOutputType> | number
          }
        }
      }
      FoodEntry: {
        payload: Prisma.$FoodEntryPayload<ExtArgs>
        fields: Prisma.FoodEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>
          }
          findFirst: {
            args: Prisma.FoodEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>
          }
          findMany: {
            args: Prisma.FoodEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>[]
          }
          create: {
            args: Prisma.FoodEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>
          }
          createMany: {
            args: Prisma.FoodEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>[]
          }
          delete: {
            args: Prisma.FoodEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>
          }
          update: {
            args: Prisma.FoodEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>
          }
          deleteMany: {
            args: Prisma.FoodEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>[]
          }
          upsert: {
            args: Prisma.FoodEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodEntryPayload>
          }
          aggregate: {
            args: Prisma.FoodEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodEntry>
          }
          groupBy: {
            args: Prisma.FoodEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodEntryCountArgs<ExtArgs>
            result: $Utils.Optional<FoodEntryCountAggregateOutputType> | number
          }
        }
      }
      ScannedProduct: {
        payload: Prisma.$ScannedProductPayload<ExtArgs>
        fields: Prisma.ScannedProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScannedProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScannedProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>
          }
          findFirst: {
            args: Prisma.ScannedProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScannedProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>
          }
          findMany: {
            args: Prisma.ScannedProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>[]
          }
          create: {
            args: Prisma.ScannedProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>
          }
          createMany: {
            args: Prisma.ScannedProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScannedProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>[]
          }
          delete: {
            args: Prisma.ScannedProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>
          }
          update: {
            args: Prisma.ScannedProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>
          }
          deleteMany: {
            args: Prisma.ScannedProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScannedProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScannedProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>[]
          }
          upsert: {
            args: Prisma.ScannedProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScannedProductPayload>
          }
          aggregate: {
            args: Prisma.ScannedProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScannedProduct>
          }
          groupBy: {
            args: Prisma.ScannedProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScannedProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScannedProductCountArgs<ExtArgs>
            result: $Utils.Optional<ScannedProductCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      FavoriteRecipe: {
        payload: Prisma.$FavoriteRecipePayload<ExtArgs>
        fields: Prisma.FavoriteRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          findFirst: {
            args: Prisma.FavoriteRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          findMany: {
            args: Prisma.FavoriteRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          create: {
            args: Prisma.FavoriteRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          createMany: {
            args: Prisma.FavoriteRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          delete: {
            args: Prisma.FavoriteRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          update: {
            args: Prisma.FavoriteRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FavoriteRecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          upsert: {
            args: Prisma.FavoriteRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          aggregate: {
            args: Prisma.FavoriteRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteRecipe>
          }
          groupBy: {
            args: Prisma.FavoriteRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteRecipeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    food?: FoodOmit
    foodEntry?: FoodEntryOmit
    scannedProduct?: ScannedProductOmit
    recipe?: RecipeOmit
    favoriteRecipe?: FavoriteRecipeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    foodEntries: number
    scannedProducts: number
    favoriteRecipes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodEntries?: boolean | UserCountOutputTypeCountFoodEntriesArgs
    scannedProducts?: boolean | UserCountOutputTypeCountScannedProductsArgs
    favoriteRecipes?: boolean | UserCountOutputTypeCountFavoriteRecipesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScannedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannedProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
  }


  /**
   * Count Type FoodCountOutputType
   */

  export type FoodCountOutputType = {
    foodEntries: number
    scannedProducts: number
  }

  export type FoodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodEntries?: boolean | FoodCountOutputTypeCountFoodEntriesArgs
    scannedProducts?: boolean | FoodCountOutputTypeCountScannedProductsArgs
  }

  // Custom InputTypes
  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodCountOutputType
     */
    select?: FoodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeCountFoodEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodEntryWhereInput
  }

  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeCountScannedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannedProductWhereInput
  }


  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    favoriteRecipes: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteRecipes?: boolean | RecipeCountOutputTypeCountFavoriteRecipesArgs
  }

  // Custom InputTypes
  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountFavoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
    currentWeight: number | null
    targetWeight: number | null
    height: number | null
    dailyCalorieGoal: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
    currentWeight: number | null
    targetWeight: number | null
    height: number | null
    dailyCalorieGoal: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    age: number | null
    gender: string | null
    currentWeight: number | null
    targetWeight: number | null
    height: number | null
    activityLevel: string | null
    dailyCalorieGoal: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    age: number | null
    gender: string | null
    currentWeight: number | null
    targetWeight: number | null
    height: number | null
    activityLevel: string | null
    dailyCalorieGoal: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    age: number
    gender: number
    currentWeight: number
    targetWeight: number
    height: number
    activityLevel: number
    dailyCalorieGoal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
    currentWeight?: true
    targetWeight?: true
    height?: true
    dailyCalorieGoal?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
    currentWeight?: true
    targetWeight?: true
    height?: true
    dailyCalorieGoal?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    age?: true
    gender?: true
    currentWeight?: true
    targetWeight?: true
    height?: true
    activityLevel?: true
    dailyCalorieGoal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    age?: true
    gender?: true
    currentWeight?: true
    targetWeight?: true
    height?: true
    activityLevel?: true
    dailyCalorieGoal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    age?: true
    gender?: true
    currentWeight?: true
    targetWeight?: true
    height?: true
    activityLevel?: true
    dailyCalorieGoal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    age: number | null
    gender: string | null
    currentWeight: number | null
    targetWeight: number | null
    height: number | null
    activityLevel: string | null
    dailyCalorieGoal: number | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    currentWeight?: boolean
    targetWeight?: boolean
    height?: boolean
    activityLevel?: boolean
    dailyCalorieGoal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodEntries?: boolean | User$foodEntriesArgs<ExtArgs>
    scannedProducts?: boolean | User$scannedProductsArgs<ExtArgs>
    favoriteRecipes?: boolean | User$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    currentWeight?: boolean
    targetWeight?: boolean
    height?: boolean
    activityLevel?: boolean
    dailyCalorieGoal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    currentWeight?: boolean
    targetWeight?: boolean
    height?: boolean
    activityLevel?: boolean
    dailyCalorieGoal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    currentWeight?: boolean
    targetWeight?: boolean
    height?: boolean
    activityLevel?: boolean
    dailyCalorieGoal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "age" | "gender" | "currentWeight" | "targetWeight" | "height" | "activityLevel" | "dailyCalorieGoal" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodEntries?: boolean | User$foodEntriesArgs<ExtArgs>
    scannedProducts?: boolean | User$scannedProductsArgs<ExtArgs>
    favoriteRecipes?: boolean | User$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      foodEntries: Prisma.$FoodEntryPayload<ExtArgs>[]
      scannedProducts: Prisma.$ScannedProductPayload<ExtArgs>[]
      favoriteRecipes: Prisma.$FavoriteRecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      age: number | null
      gender: string | null
      currentWeight: number | null
      targetWeight: number | null
      height: number | null
      activityLevel: string | null
      dailyCalorieGoal: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodEntries<T extends User$foodEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$foodEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scannedProducts<T extends User$scannedProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$scannedProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favoriteRecipes<T extends User$favoriteRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly gender: FieldRef<"User", 'String'>
    readonly currentWeight: FieldRef<"User", 'Float'>
    readonly targetWeight: FieldRef<"User", 'Float'>
    readonly height: FieldRef<"User", 'Float'>
    readonly activityLevel: FieldRef<"User", 'String'>
    readonly dailyCalorieGoal: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.foodEntries
   */
  export type User$foodEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    where?: FoodEntryWhereInput
    orderBy?: FoodEntryOrderByWithRelationInput | FoodEntryOrderByWithRelationInput[]
    cursor?: FoodEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodEntryScalarFieldEnum | FoodEntryScalarFieldEnum[]
  }

  /**
   * User.scannedProducts
   */
  export type User$scannedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    where?: ScannedProductWhereInput
    orderBy?: ScannedProductOrderByWithRelationInput | ScannedProductOrderByWithRelationInput[]
    cursor?: ScannedProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScannedProductScalarFieldEnum | ScannedProductScalarFieldEnum[]
  }

  /**
   * User.favoriteRecipes
   */
  export type User$favoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    cursor?: FavoriteRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Food
   */

  export type AggregateFood = {
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  export type FoodAvgAggregateOutputType = {
    caloriesPer100g: number | null
    proteinPer100g: number | null
    carbsPer100g: number | null
    fatPer100g: number | null
    fiberPer100g: number | null
    sugarPer100g: number | null
    sodiumPer100g: number | null
  }

  export type FoodSumAggregateOutputType = {
    caloriesPer100g: number | null
    proteinPer100g: number | null
    carbsPer100g: number | null
    fatPer100g: number | null
    fiberPer100g: number | null
    sugarPer100g: number | null
    sodiumPer100g: number | null
  }

  export type FoodMinAggregateOutputType = {
    id: string | null
    name: string | null
    brand: string | null
    barcode: string | null
    caloriesPer100g: number | null
    proteinPer100g: number | null
    carbsPer100g: number | null
    fatPer100g: number | null
    fiberPer100g: number | null
    sugarPer100g: number | null
    sodiumPer100g: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodMaxAggregateOutputType = {
    id: string | null
    name: string | null
    brand: string | null
    barcode: string | null
    caloriesPer100g: number | null
    proteinPer100g: number | null
    carbsPer100g: number | null
    fatPer100g: number | null
    fiberPer100g: number | null
    sugarPer100g: number | null
    sodiumPer100g: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodCountAggregateOutputType = {
    id: number
    name: number
    brand: number
    barcode: number
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g: number
    sugarPer100g: number
    sodiumPer100g: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodAvgAggregateInputType = {
    caloriesPer100g?: true
    proteinPer100g?: true
    carbsPer100g?: true
    fatPer100g?: true
    fiberPer100g?: true
    sugarPer100g?: true
    sodiumPer100g?: true
  }

  export type FoodSumAggregateInputType = {
    caloriesPer100g?: true
    proteinPer100g?: true
    carbsPer100g?: true
    fatPer100g?: true
    fiberPer100g?: true
    sugarPer100g?: true
    sodiumPer100g?: true
  }

  export type FoodMinAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    barcode?: true
    caloriesPer100g?: true
    proteinPer100g?: true
    carbsPer100g?: true
    fatPer100g?: true
    fiberPer100g?: true
    sugarPer100g?: true
    sodiumPer100g?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodMaxAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    barcode?: true
    caloriesPer100g?: true
    proteinPer100g?: true
    carbsPer100g?: true
    fatPer100g?: true
    fiberPer100g?: true
    sugarPer100g?: true
    sodiumPer100g?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodCountAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    barcode?: true
    caloriesPer100g?: true
    proteinPer100g?: true
    carbsPer100g?: true
    fatPer100g?: true
    fiberPer100g?: true
    sugarPer100g?: true
    sodiumPer100g?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Food to aggregate.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Foods
    **/
    _count?: true | FoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodMaxAggregateInputType
  }

  export type GetFoodAggregateType<T extends FoodAggregateArgs> = {
        [P in keyof T & keyof AggregateFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFood[P]>
      : GetScalarType<T[P], AggregateFood[P]>
  }




  export type FoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodWhereInput
    orderBy?: FoodOrderByWithAggregationInput | FoodOrderByWithAggregationInput[]
    by: FoodScalarFieldEnum[] | FoodScalarFieldEnum
    having?: FoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodCountAggregateInputType | true
    _avg?: FoodAvgAggregateInputType
    _sum?: FoodSumAggregateInputType
    _min?: FoodMinAggregateInputType
    _max?: FoodMaxAggregateInputType
  }

  export type FoodGroupByOutputType = {
    id: string
    name: string
    brand: string | null
    barcode: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g: number | null
    sugarPer100g: number | null
    sodiumPer100g: number | null
    createdAt: Date
    updatedAt: Date
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  type GetFoodGroupByPayload<T extends FoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodGroupByOutputType[P]>
            : GetScalarType<T[P], FoodGroupByOutputType[P]>
        }
      >
    >


  export type FoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    barcode?: boolean
    caloriesPer100g?: boolean
    proteinPer100g?: boolean
    carbsPer100g?: boolean
    fatPer100g?: boolean
    fiberPer100g?: boolean
    sugarPer100g?: boolean
    sodiumPer100g?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foodEntries?: boolean | Food$foodEntriesArgs<ExtArgs>
    scannedProducts?: boolean | Food$scannedProductsArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["food"]>

  export type FoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    barcode?: boolean
    caloriesPer100g?: boolean
    proteinPer100g?: boolean
    carbsPer100g?: boolean
    fatPer100g?: boolean
    fiberPer100g?: boolean
    sugarPer100g?: boolean
    sodiumPer100g?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["food"]>

  export type FoodSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    barcode?: boolean
    caloriesPer100g?: boolean
    proteinPer100g?: boolean
    carbsPer100g?: boolean
    fatPer100g?: boolean
    fiberPer100g?: boolean
    sugarPer100g?: boolean
    sodiumPer100g?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["food"]>

  export type FoodSelectScalar = {
    id?: boolean
    name?: boolean
    brand?: boolean
    barcode?: boolean
    caloriesPer100g?: boolean
    proteinPer100g?: boolean
    carbsPer100g?: boolean
    fatPer100g?: boolean
    fiberPer100g?: boolean
    sugarPer100g?: boolean
    sodiumPer100g?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "brand" | "barcode" | "caloriesPer100g" | "proteinPer100g" | "carbsPer100g" | "fatPer100g" | "fiberPer100g" | "sugarPer100g" | "sodiumPer100g" | "createdAt" | "updatedAt", ExtArgs["result"]["food"]>
  export type FoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foodEntries?: boolean | Food$foodEntriesArgs<ExtArgs>
    scannedProducts?: boolean | Food$scannedProductsArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FoodIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Food"
    objects: {
      foodEntries: Prisma.$FoodEntryPayload<ExtArgs>[]
      scannedProducts: Prisma.$ScannedProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      brand: string | null
      barcode: string | null
      caloriesPer100g: number
      proteinPer100g: number
      carbsPer100g: number
      fatPer100g: number
      fiberPer100g: number | null
      sugarPer100g: number | null
      sodiumPer100g: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["food"]>
    composites: {}
  }

  type FoodGetPayload<S extends boolean | null | undefined | FoodDefaultArgs> = $Result.GetResult<Prisma.$FoodPayload, S>

  type FoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodCountAggregateInputType | true
    }

  export interface FoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Food'], meta: { name: 'Food' } }
    /**
     * Find zero or one Food that matches the filter.
     * @param {FoodFindUniqueArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodFindUniqueArgs>(args: SelectSubset<T, FoodFindUniqueArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Food that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodFindUniqueOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Food that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodFindFirstArgs>(args?: SelectSubset<T, FoodFindFirstArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Food that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Foods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foods
     * const foods = await prisma.food.findMany()
     * 
     * // Get first 10 Foods
     * const foods = await prisma.food.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodWithIdOnly = await prisma.food.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodFindManyArgs>(args?: SelectSubset<T, FoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Food.
     * @param {FoodCreateArgs} args - Arguments to create a Food.
     * @example
     * // Create one Food
     * const Food = await prisma.food.create({
     *   data: {
     *     // ... data to create a Food
     *   }
     * })
     * 
     */
    create<T extends FoodCreateArgs>(args: SelectSubset<T, FoodCreateArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Foods.
     * @param {FoodCreateManyArgs} args - Arguments to create many Foods.
     * @example
     * // Create many Foods
     * const food = await prisma.food.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodCreateManyArgs>(args?: SelectSubset<T, FoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Foods and returns the data saved in the database.
     * @param {FoodCreateManyAndReturnArgs} args - Arguments to create many Foods.
     * @example
     * // Create many Foods
     * const food = await prisma.food.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Foods and only return the `id`
     * const foodWithIdOnly = await prisma.food.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Food.
     * @param {FoodDeleteArgs} args - Arguments to delete one Food.
     * @example
     * // Delete one Food
     * const Food = await prisma.food.delete({
     *   where: {
     *     // ... filter to delete one Food
     *   }
     * })
     * 
     */
    delete<T extends FoodDeleteArgs>(args: SelectSubset<T, FoodDeleteArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Food.
     * @param {FoodUpdateArgs} args - Arguments to update one Food.
     * @example
     * // Update one Food
     * const food = await prisma.food.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodUpdateArgs>(args: SelectSubset<T, FoodUpdateArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Foods.
     * @param {FoodDeleteManyArgs} args - Arguments to filter Foods to delete.
     * @example
     * // Delete a few Foods
     * const { count } = await prisma.food.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodDeleteManyArgs>(args?: SelectSubset<T, FoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foods
     * const food = await prisma.food.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodUpdateManyArgs>(args: SelectSubset<T, FoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foods and returns the data updated in the database.
     * @param {FoodUpdateManyAndReturnArgs} args - Arguments to update many Foods.
     * @example
     * // Update many Foods
     * const food = await prisma.food.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Foods and only return the `id`
     * const foodWithIdOnly = await prisma.food.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Food.
     * @param {FoodUpsertArgs} args - Arguments to update or create a Food.
     * @example
     * // Update or create a Food
     * const food = await prisma.food.upsert({
     *   create: {
     *     // ... data to create a Food
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Food we want to update
     *   }
     * })
     */
    upsert<T extends FoodUpsertArgs>(args: SelectSubset<T, FoodUpsertArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodCountArgs} args - Arguments to filter Foods to count.
     * @example
     * // Count the number of Foods
     * const count = await prisma.food.count({
     *   where: {
     *     // ... the filter for the Foods we want to count
     *   }
     * })
    **/
    count<T extends FoodCountArgs>(
      args?: Subset<T, FoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodAggregateArgs>(args: Subset<T, FoodAggregateArgs>): Prisma.PrismaPromise<GetFoodAggregateType<T>>

    /**
     * Group by Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodGroupByArgs['orderBy'] }
        : { orderBy?: FoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Food model
   */
  readonly fields: FoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Food.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foodEntries<T extends Food$foodEntriesArgs<ExtArgs> = {}>(args?: Subset<T, Food$foodEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scannedProducts<T extends Food$scannedProductsArgs<ExtArgs> = {}>(args?: Subset<T, Food$scannedProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Food model
   */
  interface FoodFieldRefs {
    readonly id: FieldRef<"Food", 'String'>
    readonly name: FieldRef<"Food", 'String'>
    readonly brand: FieldRef<"Food", 'String'>
    readonly barcode: FieldRef<"Food", 'String'>
    readonly caloriesPer100g: FieldRef<"Food", 'Int'>
    readonly proteinPer100g: FieldRef<"Food", 'Float'>
    readonly carbsPer100g: FieldRef<"Food", 'Float'>
    readonly fatPer100g: FieldRef<"Food", 'Float'>
    readonly fiberPer100g: FieldRef<"Food", 'Float'>
    readonly sugarPer100g: FieldRef<"Food", 'Float'>
    readonly sodiumPer100g: FieldRef<"Food", 'Float'>
    readonly createdAt: FieldRef<"Food", 'DateTime'>
    readonly updatedAt: FieldRef<"Food", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Food findUnique
   */
  export type FoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food findUniqueOrThrow
   */
  export type FoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food findFirst
   */
  export type FoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food findFirstOrThrow
   */
  export type FoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food findMany
   */
  export type FoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Foods to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food create
   */
  export type FoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Food.
     */
    data: XOR<FoodCreateInput, FoodUncheckedCreateInput>
  }

  /**
   * Food createMany
   */
  export type FoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
  }

  /**
   * Food createManyAndReturn
   */
  export type FoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
  }

  /**
   * Food update
   */
  export type FoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Food.
     */
    data: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
    /**
     * Choose, which Food to update.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food updateMany
   */
  export type FoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Foods.
     */
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyInput>
    /**
     * Filter which Foods to update
     */
    where?: FoodWhereInput
    /**
     * Limit how many Foods to update.
     */
    limit?: number
  }

  /**
   * Food updateManyAndReturn
   */
  export type FoodUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * The data used to update Foods.
     */
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyInput>
    /**
     * Filter which Foods to update
     */
    where?: FoodWhereInput
    /**
     * Limit how many Foods to update.
     */
    limit?: number
  }

  /**
   * Food upsert
   */
  export type FoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Food to update in case it exists.
     */
    where: FoodWhereUniqueInput
    /**
     * In case the Food found by the `where` argument doesn't exist, create a new Food with this data.
     */
    create: XOR<FoodCreateInput, FoodUncheckedCreateInput>
    /**
     * In case the Food was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
  }

  /**
   * Food delete
   */
  export type FoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter which Food to delete.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food deleteMany
   */
  export type FoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foods to delete
     */
    where?: FoodWhereInput
    /**
     * Limit how many Foods to delete.
     */
    limit?: number
  }

  /**
   * Food.foodEntries
   */
  export type Food$foodEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    where?: FoodEntryWhereInput
    orderBy?: FoodEntryOrderByWithRelationInput | FoodEntryOrderByWithRelationInput[]
    cursor?: FoodEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodEntryScalarFieldEnum | FoodEntryScalarFieldEnum[]
  }

  /**
   * Food.scannedProducts
   */
  export type Food$scannedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    where?: ScannedProductWhereInput
    orderBy?: ScannedProductOrderByWithRelationInput | ScannedProductOrderByWithRelationInput[]
    cursor?: ScannedProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScannedProductScalarFieldEnum | ScannedProductScalarFieldEnum[]
  }

  /**
   * Food without action
   */
  export type FoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
  }


  /**
   * Model FoodEntry
   */

  export type AggregateFoodEntry = {
    _count: FoodEntryCountAggregateOutputType | null
    _avg: FoodEntryAvgAggregateOutputType | null
    _sum: FoodEntrySumAggregateOutputType | null
    _min: FoodEntryMinAggregateOutputType | null
    _max: FoodEntryMaxAggregateOutputType | null
  }

  export type FoodEntryAvgAggregateOutputType = {
    quantity: number | null
  }

  export type FoodEntrySumAggregateOutputType = {
    quantity: number | null
  }

  export type FoodEntryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    foodId: string | null
    quantity: number | null
    mealType: string | null
    consumedAt: Date | null
    createdAt: Date | null
  }

  export type FoodEntryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    foodId: string | null
    quantity: number | null
    mealType: string | null
    consumedAt: Date | null
    createdAt: Date | null
  }

  export type FoodEntryCountAggregateOutputType = {
    id: number
    userId: number
    foodId: number
    quantity: number
    mealType: number
    consumedAt: number
    createdAt: number
    _all: number
  }


  export type FoodEntryAvgAggregateInputType = {
    quantity?: true
  }

  export type FoodEntrySumAggregateInputType = {
    quantity?: true
  }

  export type FoodEntryMinAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    quantity?: true
    mealType?: true
    consumedAt?: true
    createdAt?: true
  }

  export type FoodEntryMaxAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    quantity?: true
    mealType?: true
    consumedAt?: true
    createdAt?: true
  }

  export type FoodEntryCountAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    quantity?: true
    mealType?: true
    consumedAt?: true
    createdAt?: true
    _all?: true
  }

  export type FoodEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodEntry to aggregate.
     */
    where?: FoodEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodEntries to fetch.
     */
    orderBy?: FoodEntryOrderByWithRelationInput | FoodEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodEntries
    **/
    _count?: true | FoodEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodEntryMaxAggregateInputType
  }

  export type GetFoodEntryAggregateType<T extends FoodEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodEntry[P]>
      : GetScalarType<T[P], AggregateFoodEntry[P]>
  }




  export type FoodEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodEntryWhereInput
    orderBy?: FoodEntryOrderByWithAggregationInput | FoodEntryOrderByWithAggregationInput[]
    by: FoodEntryScalarFieldEnum[] | FoodEntryScalarFieldEnum
    having?: FoodEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodEntryCountAggregateInputType | true
    _avg?: FoodEntryAvgAggregateInputType
    _sum?: FoodEntrySumAggregateInputType
    _min?: FoodEntryMinAggregateInputType
    _max?: FoodEntryMaxAggregateInputType
  }

  export type FoodEntryGroupByOutputType = {
    id: string
    userId: string
    foodId: string
    quantity: number
    mealType: string
    consumedAt: Date
    createdAt: Date
    _count: FoodEntryCountAggregateOutputType | null
    _avg: FoodEntryAvgAggregateOutputType | null
    _sum: FoodEntrySumAggregateOutputType | null
    _min: FoodEntryMinAggregateOutputType | null
    _max: FoodEntryMaxAggregateOutputType | null
  }

  type GetFoodEntryGroupByPayload<T extends FoodEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodEntryGroupByOutputType[P]>
            : GetScalarType<T[P], FoodEntryGroupByOutputType[P]>
        }
      >
    >


  export type FoodEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    quantity?: boolean
    mealType?: boolean
    consumedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodEntry"]>

  export type FoodEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    quantity?: boolean
    mealType?: boolean
    consumedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodEntry"]>

  export type FoodEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    quantity?: boolean
    mealType?: boolean
    consumedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodEntry"]>

  export type FoodEntrySelectScalar = {
    id?: boolean
    userId?: boolean
    foodId?: boolean
    quantity?: boolean
    mealType?: boolean
    consumedAt?: boolean
    createdAt?: boolean
  }

  export type FoodEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "foodId" | "quantity" | "mealType" | "consumedAt" | "createdAt", ExtArgs["result"]["foodEntry"]>
  export type FoodEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }
  export type FoodEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }
  export type FoodEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }

  export type $FoodEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      foodId: string
      quantity: number
      mealType: string
      consumedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["foodEntry"]>
    composites: {}
  }

  type FoodEntryGetPayload<S extends boolean | null | undefined | FoodEntryDefaultArgs> = $Result.GetResult<Prisma.$FoodEntryPayload, S>

  type FoodEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodEntryCountAggregateInputType | true
    }

  export interface FoodEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodEntry'], meta: { name: 'FoodEntry' } }
    /**
     * Find zero or one FoodEntry that matches the filter.
     * @param {FoodEntryFindUniqueArgs} args - Arguments to find a FoodEntry
     * @example
     * // Get one FoodEntry
     * const foodEntry = await prisma.foodEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodEntryFindUniqueArgs>(args: SelectSubset<T, FoodEntryFindUniqueArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodEntryFindUniqueOrThrowArgs} args - Arguments to find a FoodEntry
     * @example
     * // Get one FoodEntry
     * const foodEntry = await prisma.foodEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryFindFirstArgs} args - Arguments to find a FoodEntry
     * @example
     * // Get one FoodEntry
     * const foodEntry = await prisma.foodEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodEntryFindFirstArgs>(args?: SelectSubset<T, FoodEntryFindFirstArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryFindFirstOrThrowArgs} args - Arguments to find a FoodEntry
     * @example
     * // Get one FoodEntry
     * const foodEntry = await prisma.foodEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodEntries
     * const foodEntries = await prisma.foodEntry.findMany()
     * 
     * // Get first 10 FoodEntries
     * const foodEntries = await prisma.foodEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodEntryWithIdOnly = await prisma.foodEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodEntryFindManyArgs>(args?: SelectSubset<T, FoodEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodEntry.
     * @param {FoodEntryCreateArgs} args - Arguments to create a FoodEntry.
     * @example
     * // Create one FoodEntry
     * const FoodEntry = await prisma.foodEntry.create({
     *   data: {
     *     // ... data to create a FoodEntry
     *   }
     * })
     * 
     */
    create<T extends FoodEntryCreateArgs>(args: SelectSubset<T, FoodEntryCreateArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodEntries.
     * @param {FoodEntryCreateManyArgs} args - Arguments to create many FoodEntries.
     * @example
     * // Create many FoodEntries
     * const foodEntry = await prisma.foodEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodEntryCreateManyArgs>(args?: SelectSubset<T, FoodEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodEntries and returns the data saved in the database.
     * @param {FoodEntryCreateManyAndReturnArgs} args - Arguments to create many FoodEntries.
     * @example
     * // Create many FoodEntries
     * const foodEntry = await prisma.foodEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodEntries and only return the `id`
     * const foodEntryWithIdOnly = await prisma.foodEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodEntry.
     * @param {FoodEntryDeleteArgs} args - Arguments to delete one FoodEntry.
     * @example
     * // Delete one FoodEntry
     * const FoodEntry = await prisma.foodEntry.delete({
     *   where: {
     *     // ... filter to delete one FoodEntry
     *   }
     * })
     * 
     */
    delete<T extends FoodEntryDeleteArgs>(args: SelectSubset<T, FoodEntryDeleteArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodEntry.
     * @param {FoodEntryUpdateArgs} args - Arguments to update one FoodEntry.
     * @example
     * // Update one FoodEntry
     * const foodEntry = await prisma.foodEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodEntryUpdateArgs>(args: SelectSubset<T, FoodEntryUpdateArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodEntries.
     * @param {FoodEntryDeleteManyArgs} args - Arguments to filter FoodEntries to delete.
     * @example
     * // Delete a few FoodEntries
     * const { count } = await prisma.foodEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodEntryDeleteManyArgs>(args?: SelectSubset<T, FoodEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodEntries
     * const foodEntry = await prisma.foodEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodEntryUpdateManyArgs>(args: SelectSubset<T, FoodEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodEntries and returns the data updated in the database.
     * @param {FoodEntryUpdateManyAndReturnArgs} args - Arguments to update many FoodEntries.
     * @example
     * // Update many FoodEntries
     * const foodEntry = await prisma.foodEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodEntries and only return the `id`
     * const foodEntryWithIdOnly = await prisma.foodEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodEntry.
     * @param {FoodEntryUpsertArgs} args - Arguments to update or create a FoodEntry.
     * @example
     * // Update or create a FoodEntry
     * const foodEntry = await prisma.foodEntry.upsert({
     *   create: {
     *     // ... data to create a FoodEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodEntry we want to update
     *   }
     * })
     */
    upsert<T extends FoodEntryUpsertArgs>(args: SelectSubset<T, FoodEntryUpsertArgs<ExtArgs>>): Prisma__FoodEntryClient<$Result.GetResult<Prisma.$FoodEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryCountArgs} args - Arguments to filter FoodEntries to count.
     * @example
     * // Count the number of FoodEntries
     * const count = await prisma.foodEntry.count({
     *   where: {
     *     // ... the filter for the FoodEntries we want to count
     *   }
     * })
    **/
    count<T extends FoodEntryCountArgs>(
      args?: Subset<T, FoodEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodEntryAggregateArgs>(args: Subset<T, FoodEntryAggregateArgs>): Prisma.PrismaPromise<GetFoodEntryAggregateType<T>>

    /**
     * Group by FoodEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodEntryGroupByArgs['orderBy'] }
        : { orderBy?: FoodEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodEntry model
   */
  readonly fields: FoodEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    food<T extends FoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodDefaultArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodEntry model
   */
  interface FoodEntryFieldRefs {
    readonly id: FieldRef<"FoodEntry", 'String'>
    readonly userId: FieldRef<"FoodEntry", 'String'>
    readonly foodId: FieldRef<"FoodEntry", 'String'>
    readonly quantity: FieldRef<"FoodEntry", 'Float'>
    readonly mealType: FieldRef<"FoodEntry", 'String'>
    readonly consumedAt: FieldRef<"FoodEntry", 'DateTime'>
    readonly createdAt: FieldRef<"FoodEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FoodEntry findUnique
   */
  export type FoodEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * Filter, which FoodEntry to fetch.
     */
    where: FoodEntryWhereUniqueInput
  }

  /**
   * FoodEntry findUniqueOrThrow
   */
  export type FoodEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * Filter, which FoodEntry to fetch.
     */
    where: FoodEntryWhereUniqueInput
  }

  /**
   * FoodEntry findFirst
   */
  export type FoodEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * Filter, which FoodEntry to fetch.
     */
    where?: FoodEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodEntries to fetch.
     */
    orderBy?: FoodEntryOrderByWithRelationInput | FoodEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodEntries.
     */
    cursor?: FoodEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodEntries.
     */
    distinct?: FoodEntryScalarFieldEnum | FoodEntryScalarFieldEnum[]
  }

  /**
   * FoodEntry findFirstOrThrow
   */
  export type FoodEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * Filter, which FoodEntry to fetch.
     */
    where?: FoodEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodEntries to fetch.
     */
    orderBy?: FoodEntryOrderByWithRelationInput | FoodEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodEntries.
     */
    cursor?: FoodEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodEntries.
     */
    distinct?: FoodEntryScalarFieldEnum | FoodEntryScalarFieldEnum[]
  }

  /**
   * FoodEntry findMany
   */
  export type FoodEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * Filter, which FoodEntries to fetch.
     */
    where?: FoodEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodEntries to fetch.
     */
    orderBy?: FoodEntryOrderByWithRelationInput | FoodEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodEntries.
     */
    cursor?: FoodEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodEntries.
     */
    skip?: number
    distinct?: FoodEntryScalarFieldEnum | FoodEntryScalarFieldEnum[]
  }

  /**
   * FoodEntry create
   */
  export type FoodEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodEntry.
     */
    data: XOR<FoodEntryCreateInput, FoodEntryUncheckedCreateInput>
  }

  /**
   * FoodEntry createMany
   */
  export type FoodEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodEntries.
     */
    data: FoodEntryCreateManyInput | FoodEntryCreateManyInput[]
  }

  /**
   * FoodEntry createManyAndReturn
   */
  export type FoodEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * The data used to create many FoodEntries.
     */
    data: FoodEntryCreateManyInput | FoodEntryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodEntry update
   */
  export type FoodEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodEntry.
     */
    data: XOR<FoodEntryUpdateInput, FoodEntryUncheckedUpdateInput>
    /**
     * Choose, which FoodEntry to update.
     */
    where: FoodEntryWhereUniqueInput
  }

  /**
   * FoodEntry updateMany
   */
  export type FoodEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodEntries.
     */
    data: XOR<FoodEntryUpdateManyMutationInput, FoodEntryUncheckedUpdateManyInput>
    /**
     * Filter which FoodEntries to update
     */
    where?: FoodEntryWhereInput
    /**
     * Limit how many FoodEntries to update.
     */
    limit?: number
  }

  /**
   * FoodEntry updateManyAndReturn
   */
  export type FoodEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * The data used to update FoodEntries.
     */
    data: XOR<FoodEntryUpdateManyMutationInput, FoodEntryUncheckedUpdateManyInput>
    /**
     * Filter which FoodEntries to update
     */
    where?: FoodEntryWhereInput
    /**
     * Limit how many FoodEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodEntry upsert
   */
  export type FoodEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodEntry to update in case it exists.
     */
    where: FoodEntryWhereUniqueInput
    /**
     * In case the FoodEntry found by the `where` argument doesn't exist, create a new FoodEntry with this data.
     */
    create: XOR<FoodEntryCreateInput, FoodEntryUncheckedCreateInput>
    /**
     * In case the FoodEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodEntryUpdateInput, FoodEntryUncheckedUpdateInput>
  }

  /**
   * FoodEntry delete
   */
  export type FoodEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
    /**
     * Filter which FoodEntry to delete.
     */
    where: FoodEntryWhereUniqueInput
  }

  /**
   * FoodEntry deleteMany
   */
  export type FoodEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodEntries to delete
     */
    where?: FoodEntryWhereInput
    /**
     * Limit how many FoodEntries to delete.
     */
    limit?: number
  }

  /**
   * FoodEntry without action
   */
  export type FoodEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodEntry
     */
    select?: FoodEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodEntry
     */
    omit?: FoodEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodEntryInclude<ExtArgs> | null
  }


  /**
   * Model ScannedProduct
   */

  export type AggregateScannedProduct = {
    _count: ScannedProductCountAggregateOutputType | null
    _avg: ScannedProductAvgAggregateOutputType | null
    _sum: ScannedProductSumAggregateOutputType | null
    _min: ScannedProductMinAggregateOutputType | null
    _max: ScannedProductMaxAggregateOutputType | null
  }

  export type ScannedProductAvgAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type ScannedProductSumAggregateOutputType = {
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
  }

  export type ScannedProductMinAggregateOutputType = {
    id: string | null
    userId: string | null
    foodId: string | null
    imageUrl: string | null
    extractedText: string | null
    productName: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: string | null
    isVerified: boolean | null
    createdAt: Date | null
  }

  export type ScannedProductMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    foodId: string | null
    imageUrl: string | null
    extractedText: string | null
    productName: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: string | null
    isVerified: boolean | null
    createdAt: Date | null
  }

  export type ScannedProductCountAggregateOutputType = {
    id: number
    userId: number
    foodId: number
    imageUrl: number
    extractedText: number
    productName: number
    calories: number
    protein: number
    carbs: number
    fat: number
    servingSize: number
    isVerified: number
    createdAt: number
    _all: number
  }


  export type ScannedProductAvgAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type ScannedProductSumAggregateInputType = {
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
  }

  export type ScannedProductMinAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    imageUrl?: true
    extractedText?: true
    productName?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    isVerified?: true
    createdAt?: true
  }

  export type ScannedProductMaxAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    imageUrl?: true
    extractedText?: true
    productName?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    isVerified?: true
    createdAt?: true
  }

  export type ScannedProductCountAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    imageUrl?: true
    extractedText?: true
    productName?: true
    calories?: true
    protein?: true
    carbs?: true
    fat?: true
    servingSize?: true
    isVerified?: true
    createdAt?: true
    _all?: true
  }

  export type ScannedProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannedProduct to aggregate.
     */
    where?: ScannedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannedProducts to fetch.
     */
    orderBy?: ScannedProductOrderByWithRelationInput | ScannedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScannedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScannedProducts
    **/
    _count?: true | ScannedProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScannedProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScannedProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScannedProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScannedProductMaxAggregateInputType
  }

  export type GetScannedProductAggregateType<T extends ScannedProductAggregateArgs> = {
        [P in keyof T & keyof AggregateScannedProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScannedProduct[P]>
      : GetScalarType<T[P], AggregateScannedProduct[P]>
  }




  export type ScannedProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScannedProductWhereInput
    orderBy?: ScannedProductOrderByWithAggregationInput | ScannedProductOrderByWithAggregationInput[]
    by: ScannedProductScalarFieldEnum[] | ScannedProductScalarFieldEnum
    having?: ScannedProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScannedProductCountAggregateInputType | true
    _avg?: ScannedProductAvgAggregateInputType
    _sum?: ScannedProductSumAggregateInputType
    _min?: ScannedProductMinAggregateInputType
    _max?: ScannedProductMaxAggregateInputType
  }

  export type ScannedProductGroupByOutputType = {
    id: string
    userId: string
    foodId: string | null
    imageUrl: string
    extractedText: string | null
    productName: string | null
    calories: number | null
    protein: number | null
    carbs: number | null
    fat: number | null
    servingSize: string | null
    isVerified: boolean
    createdAt: Date
    _count: ScannedProductCountAggregateOutputType | null
    _avg: ScannedProductAvgAggregateOutputType | null
    _sum: ScannedProductSumAggregateOutputType | null
    _min: ScannedProductMinAggregateOutputType | null
    _max: ScannedProductMaxAggregateOutputType | null
  }

  type GetScannedProductGroupByPayload<T extends ScannedProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScannedProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScannedProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScannedProductGroupByOutputType[P]>
            : GetScalarType<T[P], ScannedProductGroupByOutputType[P]>
        }
      >
    >


  export type ScannedProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    imageUrl?: boolean
    extractedText?: boolean
    productName?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    isVerified?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | ScannedProduct$foodArgs<ExtArgs>
  }, ExtArgs["result"]["scannedProduct"]>

  export type ScannedProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    imageUrl?: boolean
    extractedText?: boolean
    productName?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    isVerified?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | ScannedProduct$foodArgs<ExtArgs>
  }, ExtArgs["result"]["scannedProduct"]>

  export type ScannedProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    imageUrl?: boolean
    extractedText?: boolean
    productName?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    isVerified?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | ScannedProduct$foodArgs<ExtArgs>
  }, ExtArgs["result"]["scannedProduct"]>

  export type ScannedProductSelectScalar = {
    id?: boolean
    userId?: boolean
    foodId?: boolean
    imageUrl?: boolean
    extractedText?: boolean
    productName?: boolean
    calories?: boolean
    protein?: boolean
    carbs?: boolean
    fat?: boolean
    servingSize?: boolean
    isVerified?: boolean
    createdAt?: boolean
  }

  export type ScannedProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "foodId" | "imageUrl" | "extractedText" | "productName" | "calories" | "protein" | "carbs" | "fat" | "servingSize" | "isVerified" | "createdAt", ExtArgs["result"]["scannedProduct"]>
  export type ScannedProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | ScannedProduct$foodArgs<ExtArgs>
  }
  export type ScannedProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | ScannedProduct$foodArgs<ExtArgs>
  }
  export type ScannedProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | ScannedProduct$foodArgs<ExtArgs>
  }

  export type $ScannedProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScannedProduct"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      foodId: string | null
      imageUrl: string
      extractedText: string | null
      productName: string | null
      calories: number | null
      protein: number | null
      carbs: number | null
      fat: number | null
      servingSize: string | null
      isVerified: boolean
      createdAt: Date
    }, ExtArgs["result"]["scannedProduct"]>
    composites: {}
  }

  type ScannedProductGetPayload<S extends boolean | null | undefined | ScannedProductDefaultArgs> = $Result.GetResult<Prisma.$ScannedProductPayload, S>

  type ScannedProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScannedProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScannedProductCountAggregateInputType | true
    }

  export interface ScannedProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScannedProduct'], meta: { name: 'ScannedProduct' } }
    /**
     * Find zero or one ScannedProduct that matches the filter.
     * @param {ScannedProductFindUniqueArgs} args - Arguments to find a ScannedProduct
     * @example
     * // Get one ScannedProduct
     * const scannedProduct = await prisma.scannedProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScannedProductFindUniqueArgs>(args: SelectSubset<T, ScannedProductFindUniqueArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScannedProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScannedProductFindUniqueOrThrowArgs} args - Arguments to find a ScannedProduct
     * @example
     * // Get one ScannedProduct
     * const scannedProduct = await prisma.scannedProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScannedProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ScannedProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScannedProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductFindFirstArgs} args - Arguments to find a ScannedProduct
     * @example
     * // Get one ScannedProduct
     * const scannedProduct = await prisma.scannedProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScannedProductFindFirstArgs>(args?: SelectSubset<T, ScannedProductFindFirstArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScannedProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductFindFirstOrThrowArgs} args - Arguments to find a ScannedProduct
     * @example
     * // Get one ScannedProduct
     * const scannedProduct = await prisma.scannedProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScannedProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ScannedProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScannedProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScannedProducts
     * const scannedProducts = await prisma.scannedProduct.findMany()
     * 
     * // Get first 10 ScannedProducts
     * const scannedProducts = await prisma.scannedProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scannedProductWithIdOnly = await prisma.scannedProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScannedProductFindManyArgs>(args?: SelectSubset<T, ScannedProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScannedProduct.
     * @param {ScannedProductCreateArgs} args - Arguments to create a ScannedProduct.
     * @example
     * // Create one ScannedProduct
     * const ScannedProduct = await prisma.scannedProduct.create({
     *   data: {
     *     // ... data to create a ScannedProduct
     *   }
     * })
     * 
     */
    create<T extends ScannedProductCreateArgs>(args: SelectSubset<T, ScannedProductCreateArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScannedProducts.
     * @param {ScannedProductCreateManyArgs} args - Arguments to create many ScannedProducts.
     * @example
     * // Create many ScannedProducts
     * const scannedProduct = await prisma.scannedProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScannedProductCreateManyArgs>(args?: SelectSubset<T, ScannedProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScannedProducts and returns the data saved in the database.
     * @param {ScannedProductCreateManyAndReturnArgs} args - Arguments to create many ScannedProducts.
     * @example
     * // Create many ScannedProducts
     * const scannedProduct = await prisma.scannedProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScannedProducts and only return the `id`
     * const scannedProductWithIdOnly = await prisma.scannedProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScannedProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ScannedProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScannedProduct.
     * @param {ScannedProductDeleteArgs} args - Arguments to delete one ScannedProduct.
     * @example
     * // Delete one ScannedProduct
     * const ScannedProduct = await prisma.scannedProduct.delete({
     *   where: {
     *     // ... filter to delete one ScannedProduct
     *   }
     * })
     * 
     */
    delete<T extends ScannedProductDeleteArgs>(args: SelectSubset<T, ScannedProductDeleteArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScannedProduct.
     * @param {ScannedProductUpdateArgs} args - Arguments to update one ScannedProduct.
     * @example
     * // Update one ScannedProduct
     * const scannedProduct = await prisma.scannedProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScannedProductUpdateArgs>(args: SelectSubset<T, ScannedProductUpdateArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScannedProducts.
     * @param {ScannedProductDeleteManyArgs} args - Arguments to filter ScannedProducts to delete.
     * @example
     * // Delete a few ScannedProducts
     * const { count } = await prisma.scannedProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScannedProductDeleteManyArgs>(args?: SelectSubset<T, ScannedProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScannedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScannedProducts
     * const scannedProduct = await prisma.scannedProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScannedProductUpdateManyArgs>(args: SelectSubset<T, ScannedProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScannedProducts and returns the data updated in the database.
     * @param {ScannedProductUpdateManyAndReturnArgs} args - Arguments to update many ScannedProducts.
     * @example
     * // Update many ScannedProducts
     * const scannedProduct = await prisma.scannedProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScannedProducts and only return the `id`
     * const scannedProductWithIdOnly = await prisma.scannedProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScannedProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ScannedProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScannedProduct.
     * @param {ScannedProductUpsertArgs} args - Arguments to update or create a ScannedProduct.
     * @example
     * // Update or create a ScannedProduct
     * const scannedProduct = await prisma.scannedProduct.upsert({
     *   create: {
     *     // ... data to create a ScannedProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScannedProduct we want to update
     *   }
     * })
     */
    upsert<T extends ScannedProductUpsertArgs>(args: SelectSubset<T, ScannedProductUpsertArgs<ExtArgs>>): Prisma__ScannedProductClient<$Result.GetResult<Prisma.$ScannedProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScannedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductCountArgs} args - Arguments to filter ScannedProducts to count.
     * @example
     * // Count the number of ScannedProducts
     * const count = await prisma.scannedProduct.count({
     *   where: {
     *     // ... the filter for the ScannedProducts we want to count
     *   }
     * })
    **/
    count<T extends ScannedProductCountArgs>(
      args?: Subset<T, ScannedProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScannedProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScannedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScannedProductAggregateArgs>(args: Subset<T, ScannedProductAggregateArgs>): Prisma.PrismaPromise<GetScannedProductAggregateType<T>>

    /**
     * Group by ScannedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScannedProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScannedProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScannedProductGroupByArgs['orderBy'] }
        : { orderBy?: ScannedProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScannedProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScannedProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScannedProduct model
   */
  readonly fields: ScannedProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScannedProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScannedProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    food<T extends ScannedProduct$foodArgs<ExtArgs> = {}>(args?: Subset<T, ScannedProduct$foodArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScannedProduct model
   */
  interface ScannedProductFieldRefs {
    readonly id: FieldRef<"ScannedProduct", 'String'>
    readonly userId: FieldRef<"ScannedProduct", 'String'>
    readonly foodId: FieldRef<"ScannedProduct", 'String'>
    readonly imageUrl: FieldRef<"ScannedProduct", 'String'>
    readonly extractedText: FieldRef<"ScannedProduct", 'String'>
    readonly productName: FieldRef<"ScannedProduct", 'String'>
    readonly calories: FieldRef<"ScannedProduct", 'Int'>
    readonly protein: FieldRef<"ScannedProduct", 'Float'>
    readonly carbs: FieldRef<"ScannedProduct", 'Float'>
    readonly fat: FieldRef<"ScannedProduct", 'Float'>
    readonly servingSize: FieldRef<"ScannedProduct", 'String'>
    readonly isVerified: FieldRef<"ScannedProduct", 'Boolean'>
    readonly createdAt: FieldRef<"ScannedProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScannedProduct findUnique
   */
  export type ScannedProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannedProduct to fetch.
     */
    where: ScannedProductWhereUniqueInput
  }

  /**
   * ScannedProduct findUniqueOrThrow
   */
  export type ScannedProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannedProduct to fetch.
     */
    where: ScannedProductWhereUniqueInput
  }

  /**
   * ScannedProduct findFirst
   */
  export type ScannedProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannedProduct to fetch.
     */
    where?: ScannedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannedProducts to fetch.
     */
    orderBy?: ScannedProductOrderByWithRelationInput | ScannedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannedProducts.
     */
    cursor?: ScannedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannedProducts.
     */
    distinct?: ScannedProductScalarFieldEnum | ScannedProductScalarFieldEnum[]
  }

  /**
   * ScannedProduct findFirstOrThrow
   */
  export type ScannedProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannedProduct to fetch.
     */
    where?: ScannedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannedProducts to fetch.
     */
    orderBy?: ScannedProductOrderByWithRelationInput | ScannedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScannedProducts.
     */
    cursor?: ScannedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScannedProducts.
     */
    distinct?: ScannedProductScalarFieldEnum | ScannedProductScalarFieldEnum[]
  }

  /**
   * ScannedProduct findMany
   */
  export type ScannedProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * Filter, which ScannedProducts to fetch.
     */
    where?: ScannedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScannedProducts to fetch.
     */
    orderBy?: ScannedProductOrderByWithRelationInput | ScannedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScannedProducts.
     */
    cursor?: ScannedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScannedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScannedProducts.
     */
    skip?: number
    distinct?: ScannedProductScalarFieldEnum | ScannedProductScalarFieldEnum[]
  }

  /**
   * ScannedProduct create
   */
  export type ScannedProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * The data needed to create a ScannedProduct.
     */
    data: XOR<ScannedProductCreateInput, ScannedProductUncheckedCreateInput>
  }

  /**
   * ScannedProduct createMany
   */
  export type ScannedProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScannedProducts.
     */
    data: ScannedProductCreateManyInput | ScannedProductCreateManyInput[]
  }

  /**
   * ScannedProduct createManyAndReturn
   */
  export type ScannedProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * The data used to create many ScannedProducts.
     */
    data: ScannedProductCreateManyInput | ScannedProductCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScannedProduct update
   */
  export type ScannedProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * The data needed to update a ScannedProduct.
     */
    data: XOR<ScannedProductUpdateInput, ScannedProductUncheckedUpdateInput>
    /**
     * Choose, which ScannedProduct to update.
     */
    where: ScannedProductWhereUniqueInput
  }

  /**
   * ScannedProduct updateMany
   */
  export type ScannedProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScannedProducts.
     */
    data: XOR<ScannedProductUpdateManyMutationInput, ScannedProductUncheckedUpdateManyInput>
    /**
     * Filter which ScannedProducts to update
     */
    where?: ScannedProductWhereInput
    /**
     * Limit how many ScannedProducts to update.
     */
    limit?: number
  }

  /**
   * ScannedProduct updateManyAndReturn
   */
  export type ScannedProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * The data used to update ScannedProducts.
     */
    data: XOR<ScannedProductUpdateManyMutationInput, ScannedProductUncheckedUpdateManyInput>
    /**
     * Filter which ScannedProducts to update
     */
    where?: ScannedProductWhereInput
    /**
     * Limit how many ScannedProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScannedProduct upsert
   */
  export type ScannedProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * The filter to search for the ScannedProduct to update in case it exists.
     */
    where: ScannedProductWhereUniqueInput
    /**
     * In case the ScannedProduct found by the `where` argument doesn't exist, create a new ScannedProduct with this data.
     */
    create: XOR<ScannedProductCreateInput, ScannedProductUncheckedCreateInput>
    /**
     * In case the ScannedProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScannedProductUpdateInput, ScannedProductUncheckedUpdateInput>
  }

  /**
   * ScannedProduct delete
   */
  export type ScannedProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
    /**
     * Filter which ScannedProduct to delete.
     */
    where: ScannedProductWhereUniqueInput
  }

  /**
   * ScannedProduct deleteMany
   */
  export type ScannedProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScannedProducts to delete
     */
    where?: ScannedProductWhereInput
    /**
     * Limit how many ScannedProducts to delete.
     */
    limit?: number
  }

  /**
   * ScannedProduct.food
   */
  export type ScannedProduct$foodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Food
     */
    omit?: FoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    where?: FoodWhereInput
  }

  /**
   * ScannedProduct without action
   */
  export type ScannedProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScannedProduct
     */
    select?: ScannedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScannedProduct
     */
    omit?: ScannedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScannedProductInclude<ExtArgs> | null
  }


  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    cookingTime: number | null
    servings: number | null
    caloriesPerServing: number | null
    proteinPerServing: number | null
    carbsPerServing: number | null
    fatPerServing: number | null
  }

  export type RecipeSumAggregateOutputType = {
    cookingTime: number | null
    servings: number | null
    caloriesPerServing: number | null
    proteinPerServing: number | null
    carbsPerServing: number | null
    fatPerServing: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    instructions: string | null
    ingredients: string | null
    cookingTime: number | null
    servings: number | null
    caloriesPerServing: number | null
    proteinPerServing: number | null
    carbsPerServing: number | null
    fatPerServing: number | null
    imageUrl: string | null
    sourceUrl: string | null
    category: string | null
    tags: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    instructions: string | null
    ingredients: string | null
    cookingTime: number | null
    servings: number | null
    caloriesPerServing: number | null
    proteinPerServing: number | null
    carbsPerServing: number | null
    fatPerServing: number | null
    imageUrl: string | null
    sourceUrl: string | null
    category: string | null
    tags: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    instructions: number
    ingredients: number
    cookingTime: number
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl: number
    sourceUrl: number
    category: number
    tags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    cookingTime?: true
    servings?: true
    caloriesPerServing?: true
    proteinPerServing?: true
    carbsPerServing?: true
    fatPerServing?: true
  }

  export type RecipeSumAggregateInputType = {
    cookingTime?: true
    servings?: true
    caloriesPerServing?: true
    proteinPerServing?: true
    carbsPerServing?: true
    fatPerServing?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    ingredients?: true
    cookingTime?: true
    servings?: true
    caloriesPerServing?: true
    proteinPerServing?: true
    carbsPerServing?: true
    fatPerServing?: true
    imageUrl?: true
    sourceUrl?: true
    category?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    ingredients?: true
    cookingTime?: true
    servings?: true
    caloriesPerServing?: true
    proteinPerServing?: true
    carbsPerServing?: true
    fatPerServing?: true
    imageUrl?: true
    sourceUrl?: true
    category?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    ingredients?: true
    cookingTime?: true
    servings?: true
    caloriesPerServing?: true
    proteinPerServing?: true
    carbsPerServing?: true
    fatPerServing?: true
    imageUrl?: true
    sourceUrl?: true
    category?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: string
    title: string
    description: string | null
    instructions: string
    ingredients: string
    cookingTime: number | null
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl: string | null
    sourceUrl: string | null
    category: string | null
    tags: string | null
    createdAt: Date
    updatedAt: Date
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    ingredients?: boolean
    cookingTime?: boolean
    servings?: boolean
    caloriesPerServing?: boolean
    proteinPerServing?: boolean
    carbsPerServing?: boolean
    fatPerServing?: boolean
    imageUrl?: boolean
    sourceUrl?: boolean
    category?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    favoriteRecipes?: boolean | Recipe$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    ingredients?: boolean
    cookingTime?: boolean
    servings?: boolean
    caloriesPerServing?: boolean
    proteinPerServing?: boolean
    carbsPerServing?: boolean
    fatPerServing?: boolean
    imageUrl?: boolean
    sourceUrl?: boolean
    category?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    ingredients?: boolean
    cookingTime?: boolean
    servings?: boolean
    caloriesPerServing?: boolean
    proteinPerServing?: boolean
    carbsPerServing?: boolean
    fatPerServing?: boolean
    imageUrl?: boolean
    sourceUrl?: boolean
    category?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    ingredients?: boolean
    cookingTime?: boolean
    servings?: boolean
    caloriesPerServing?: boolean
    proteinPerServing?: boolean
    carbsPerServing?: boolean
    fatPerServing?: boolean
    imageUrl?: boolean
    sourceUrl?: boolean
    category?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "instructions" | "ingredients" | "cookingTime" | "servings" | "caloriesPerServing" | "proteinPerServing" | "carbsPerServing" | "fatPerServing" | "imageUrl" | "sourceUrl" | "category" | "tags" | "createdAt" | "updatedAt", ExtArgs["result"]["recipe"]>
  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoriteRecipes?: boolean | Recipe$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RecipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      favoriteRecipes: Prisma.$FavoriteRecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      instructions: string
      ingredients: string
      cookingTime: number | null
      servings: number
      caloriesPerServing: number
      proteinPerServing: number
      carbsPerServing: number
      fatPerServing: number
      imageUrl: string | null
      sourceUrl: string | null
      category: string | null
      tags: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }

  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeFindUniqueArgs>(args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeFindFirstArgs>(args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeFindManyArgs>(args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
     */
    create<T extends RecipeCreateArgs>(args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recipes.
     * @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeCreateManyArgs>(args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recipes and returns the data saved in the database.
     * @param {RecipeCreateManyAndReturnArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
     */
    delete<T extends RecipeDeleteArgs>(args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeUpdateArgs>(args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeDeleteManyArgs>(args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeUpdateManyArgs>(args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes and returns the data updated in the database.
     * @param {RecipeUpdateManyAndReturnArgs} args - Arguments to update many Recipes.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, RecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
     */
    upsert<T extends RecipeUpsertArgs>(args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favoriteRecipes<T extends Recipe$favoriteRecipesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$favoriteRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipe model
   */
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'String'>
    readonly title: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly instructions: FieldRef<"Recipe", 'String'>
    readonly ingredients: FieldRef<"Recipe", 'String'>
    readonly cookingTime: FieldRef<"Recipe", 'Int'>
    readonly servings: FieldRef<"Recipe", 'Int'>
    readonly caloriesPerServing: FieldRef<"Recipe", 'Int'>
    readonly proteinPerServing: FieldRef<"Recipe", 'Float'>
    readonly carbsPerServing: FieldRef<"Recipe", 'Float'>
    readonly fatPerServing: FieldRef<"Recipe", 'Float'>
    readonly imageUrl: FieldRef<"Recipe", 'String'>
    readonly sourceUrl: FieldRef<"Recipe", 'String'>
    readonly category: FieldRef<"Recipe", 'String'>
    readonly tags: FieldRef<"Recipe", 'String'>
    readonly createdAt: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }

  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
  }

  /**
   * Recipe createManyAndReturn
   */
  export type RecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
  }

  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
    /**
     * Limit how many Recipes to update.
     */
    limit?: number
  }

  /**
   * Recipe updateManyAndReturn
   */
  export type RecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
    /**
     * Limit how many Recipes to update.
     */
    limit?: number
  }

  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }

  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
    /**
     * Limit how many Recipes to delete.
     */
    limit?: number
  }

  /**
   * Recipe.favoriteRecipes
   */
  export type Recipe$favoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    cursor?: FavoriteRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteRecipe
   */

  export type AggregateFavoriteRecipe = {
    _count: FavoriteRecipeCountAggregateOutputType | null
    _min: FavoriteRecipeMinAggregateOutputType | null
    _max: FavoriteRecipeMaxAggregateOutputType | null
  }

  export type FavoriteRecipeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: string | null
    createdAt: Date | null
  }

  export type FavoriteRecipeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: string | null
    createdAt: Date | null
  }

  export type FavoriteRecipeCountAggregateOutputType = {
    id: number
    userId: number
    recipeId: number
    createdAt: number
    _all: number
  }


  export type FavoriteRecipeMinAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    createdAt?: true
  }

  export type FavoriteRecipeMaxAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    createdAt?: true
  }

  export type FavoriteRecipeCountAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    createdAt?: true
    _all?: true
  }

  export type FavoriteRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteRecipe to aggregate.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteRecipes
    **/
    _count?: true | FavoriteRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteRecipeMaxAggregateInputType
  }

  export type GetFavoriteRecipeAggregateType<T extends FavoriteRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteRecipe[P]>
      : GetScalarType<T[P], AggregateFavoriteRecipe[P]>
  }




  export type FavoriteRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithAggregationInput | FavoriteRecipeOrderByWithAggregationInput[]
    by: FavoriteRecipeScalarFieldEnum[] | FavoriteRecipeScalarFieldEnum
    having?: FavoriteRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteRecipeCountAggregateInputType | true
    _min?: FavoriteRecipeMinAggregateInputType
    _max?: FavoriteRecipeMaxAggregateInputType
  }

  export type FavoriteRecipeGroupByOutputType = {
    id: string
    userId: string
    recipeId: string
    createdAt: Date
    _count: FavoriteRecipeCountAggregateOutputType | null
    _min: FavoriteRecipeMinAggregateOutputType | null
    _max: FavoriteRecipeMaxAggregateOutputType | null
  }

  type GetFavoriteRecipeGroupByPayload<T extends FavoriteRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteRecipeGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectScalar = {
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
  }

  export type FavoriteRecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "recipeId" | "createdAt", ExtArgs["result"]["favoriteRecipe"]>
  export type FavoriteRecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type FavoriteRecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type FavoriteRecipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $FavoriteRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteRecipe"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      recipeId: string
      createdAt: Date
    }, ExtArgs["result"]["favoriteRecipe"]>
    composites: {}
  }

  type FavoriteRecipeGetPayload<S extends boolean | null | undefined | FavoriteRecipeDefaultArgs> = $Result.GetResult<Prisma.$FavoriteRecipePayload, S>

  type FavoriteRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FavoriteRecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FavoriteRecipeCountAggregateInputType | true
    }

  export interface FavoriteRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteRecipe'], meta: { name: 'FavoriteRecipe' } }
    /**
     * Find zero or one FavoriteRecipe that matches the filter.
     * @param {FavoriteRecipeFindUniqueArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteRecipeFindUniqueArgs>(args: SelectSubset<T, FavoriteRecipeFindUniqueArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FavoriteRecipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FavoriteRecipeFindUniqueOrThrowArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FavoriteRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindFirstArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteRecipeFindFirstArgs>(args?: SelectSubset<T, FavoriteRecipeFindFirstArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FavoriteRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindFirstOrThrowArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FavoriteRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteRecipes
     * const favoriteRecipes = await prisma.favoriteRecipe.findMany()
     * 
     * // Get first 10 FavoriteRecipes
     * const favoriteRecipes = await prisma.favoriteRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteRecipeFindManyArgs>(args?: SelectSubset<T, FavoriteRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FavoriteRecipe.
     * @param {FavoriteRecipeCreateArgs} args - Arguments to create a FavoriteRecipe.
     * @example
     * // Create one FavoriteRecipe
     * const FavoriteRecipe = await prisma.favoriteRecipe.create({
     *   data: {
     *     // ... data to create a FavoriteRecipe
     *   }
     * })
     * 
     */
    create<T extends FavoriteRecipeCreateArgs>(args: SelectSubset<T, FavoriteRecipeCreateArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FavoriteRecipes.
     * @param {FavoriteRecipeCreateManyArgs} args - Arguments to create many FavoriteRecipes.
     * @example
     * // Create many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteRecipeCreateManyArgs>(args?: SelectSubset<T, FavoriteRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteRecipes and returns the data saved in the database.
     * @param {FavoriteRecipeCreateManyAndReturnArgs} args - Arguments to create many FavoriteRecipes.
     * @example
     * // Create many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteRecipes and only return the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FavoriteRecipe.
     * @param {FavoriteRecipeDeleteArgs} args - Arguments to delete one FavoriteRecipe.
     * @example
     * // Delete one FavoriteRecipe
     * const FavoriteRecipe = await prisma.favoriteRecipe.delete({
     *   where: {
     *     // ... filter to delete one FavoriteRecipe
     *   }
     * })
     * 
     */
    delete<T extends FavoriteRecipeDeleteArgs>(args: SelectSubset<T, FavoriteRecipeDeleteArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FavoriteRecipe.
     * @param {FavoriteRecipeUpdateArgs} args - Arguments to update one FavoriteRecipe.
     * @example
     * // Update one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteRecipeUpdateArgs>(args: SelectSubset<T, FavoriteRecipeUpdateArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FavoriteRecipes.
     * @param {FavoriteRecipeDeleteManyArgs} args - Arguments to filter FavoriteRecipes to delete.
     * @example
     * // Delete a few FavoriteRecipes
     * const { count } = await prisma.favoriteRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteRecipeDeleteManyArgs>(args?: SelectSubset<T, FavoriteRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteRecipeUpdateManyArgs>(args: SelectSubset<T, FavoriteRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteRecipes and returns the data updated in the database.
     * @param {FavoriteRecipeUpdateManyAndReturnArgs} args - Arguments to update many FavoriteRecipes.
     * @example
     * // Update many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FavoriteRecipes and only return the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FavoriteRecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, FavoriteRecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FavoriteRecipe.
     * @param {FavoriteRecipeUpsertArgs} args - Arguments to update or create a FavoriteRecipe.
     * @example
     * // Update or create a FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.upsert({
     *   create: {
     *     // ... data to create a FavoriteRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteRecipe we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteRecipeUpsertArgs>(args: SelectSubset<T, FavoriteRecipeUpsertArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FavoriteRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeCountArgs} args - Arguments to filter FavoriteRecipes to count.
     * @example
     * // Count the number of FavoriteRecipes
     * const count = await prisma.favoriteRecipe.count({
     *   where: {
     *     // ... the filter for the FavoriteRecipes we want to count
     *   }
     * })
    **/
    count<T extends FavoriteRecipeCountArgs>(
      args?: Subset<T, FavoriteRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteRecipeAggregateArgs>(args: Subset<T, FavoriteRecipeAggregateArgs>): Prisma.PrismaPromise<GetFavoriteRecipeAggregateType<T>>

    /**
     * Group by FavoriteRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteRecipeGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteRecipe model
   */
  readonly fields: FavoriteRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteRecipe model
   */
  interface FavoriteRecipeFieldRefs {
    readonly id: FieldRef<"FavoriteRecipe", 'String'>
    readonly userId: FieldRef<"FavoriteRecipe", 'String'>
    readonly recipeId: FieldRef<"FavoriteRecipe", 'String'>
    readonly createdAt: FieldRef<"FavoriteRecipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteRecipe findUnique
   */
  export type FavoriteRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe findUniqueOrThrow
   */
  export type FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe findFirst
   */
  export type FavoriteRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteRecipes.
     */
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe findFirstOrThrow
   */
  export type FavoriteRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteRecipes.
     */
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe findMany
   */
  export type FavoriteRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipes to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe create
   */
  export type FavoriteRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteRecipe.
     */
    data: XOR<FavoriteRecipeCreateInput, FavoriteRecipeUncheckedCreateInput>
  }

  /**
   * FavoriteRecipe createMany
   */
  export type FavoriteRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteRecipes.
     */
    data: FavoriteRecipeCreateManyInput | FavoriteRecipeCreateManyInput[]
  }

  /**
   * FavoriteRecipe createManyAndReturn
   */
  export type FavoriteRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * The data used to create many FavoriteRecipes.
     */
    data: FavoriteRecipeCreateManyInput | FavoriteRecipeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteRecipe update
   */
  export type FavoriteRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteRecipe.
     */
    data: XOR<FavoriteRecipeUpdateInput, FavoriteRecipeUncheckedUpdateInput>
    /**
     * Choose, which FavoriteRecipe to update.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe updateMany
   */
  export type FavoriteRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteRecipes.
     */
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteRecipes to update
     */
    where?: FavoriteRecipeWhereInput
    /**
     * Limit how many FavoriteRecipes to update.
     */
    limit?: number
  }

  /**
   * FavoriteRecipe updateManyAndReturn
   */
  export type FavoriteRecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * The data used to update FavoriteRecipes.
     */
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteRecipes to update
     */
    where?: FavoriteRecipeWhereInput
    /**
     * Limit how many FavoriteRecipes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteRecipe upsert
   */
  export type FavoriteRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteRecipe to update in case it exists.
     */
    where: FavoriteRecipeWhereUniqueInput
    /**
     * In case the FavoriteRecipe found by the `where` argument doesn't exist, create a new FavoriteRecipe with this data.
     */
    create: XOR<FavoriteRecipeCreateInput, FavoriteRecipeUncheckedCreateInput>
    /**
     * In case the FavoriteRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteRecipeUpdateInput, FavoriteRecipeUncheckedUpdateInput>
  }

  /**
   * FavoriteRecipe delete
   */
  export type FavoriteRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter which FavoriteRecipe to delete.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe deleteMany
   */
  export type FavoriteRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteRecipes to delete
     */
    where?: FavoriteRecipeWhereInput
    /**
     * Limit how many FavoriteRecipes to delete.
     */
    limit?: number
  }

  /**
   * FavoriteRecipe without action
   */
  export type FavoriteRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteRecipe
     */
    omit?: FavoriteRecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    age: 'age',
    gender: 'gender',
    currentWeight: 'currentWeight',
    targetWeight: 'targetWeight',
    height: 'height',
    activityLevel: 'activityLevel',
    dailyCalorieGoal: 'dailyCalorieGoal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FoodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    brand: 'brand',
    barcode: 'barcode',
    caloriesPer100g: 'caloriesPer100g',
    proteinPer100g: 'proteinPer100g',
    carbsPer100g: 'carbsPer100g',
    fatPer100g: 'fatPer100g',
    fiberPer100g: 'fiberPer100g',
    sugarPer100g: 'sugarPer100g',
    sodiumPer100g: 'sodiumPer100g',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodScalarFieldEnum = (typeof FoodScalarFieldEnum)[keyof typeof FoodScalarFieldEnum]


  export const FoodEntryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    foodId: 'foodId',
    quantity: 'quantity',
    mealType: 'mealType',
    consumedAt: 'consumedAt',
    createdAt: 'createdAt'
  };

  export type FoodEntryScalarFieldEnum = (typeof FoodEntryScalarFieldEnum)[keyof typeof FoodEntryScalarFieldEnum]


  export const ScannedProductScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    foodId: 'foodId',
    imageUrl: 'imageUrl',
    extractedText: 'extractedText',
    productName: 'productName',
    calories: 'calories',
    protein: 'protein',
    carbs: 'carbs',
    fat: 'fat',
    servingSize: 'servingSize',
    isVerified: 'isVerified',
    createdAt: 'createdAt'
  };

  export type ScannedProductScalarFieldEnum = (typeof ScannedProductScalarFieldEnum)[keyof typeof ScannedProductScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    instructions: 'instructions',
    ingredients: 'ingredients',
    cookingTime: 'cookingTime',
    servings: 'servings',
    caloriesPerServing: 'caloriesPerServing',
    proteinPerServing: 'proteinPerServing',
    carbsPerServing: 'carbsPerServing',
    fatPerServing: 'fatPerServing',
    imageUrl: 'imageUrl',
    sourceUrl: 'sourceUrl',
    category: 'category',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const FavoriteRecipeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    recipeId: 'recipeId',
    createdAt: 'createdAt'
  };

  export type FavoriteRecipeScalarFieldEnum = (typeof FavoriteRecipeScalarFieldEnum)[keyof typeof FavoriteRecipeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    age?: IntNullableFilter<"User"> | number | null
    gender?: StringNullableFilter<"User"> | string | null
    currentWeight?: FloatNullableFilter<"User"> | number | null
    targetWeight?: FloatNullableFilter<"User"> | number | null
    height?: FloatNullableFilter<"User"> | number | null
    activityLevel?: StringNullableFilter<"User"> | string | null
    dailyCalorieGoal?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    foodEntries?: FoodEntryListRelationFilter
    scannedProducts?: ScannedProductListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    currentWeight?: SortOrderInput | SortOrder
    targetWeight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    activityLevel?: SortOrderInput | SortOrder
    dailyCalorieGoal?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foodEntries?: FoodEntryOrderByRelationAggregateInput
    scannedProducts?: ScannedProductOrderByRelationAggregateInput
    favoriteRecipes?: FavoriteRecipeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    age?: IntNullableFilter<"User"> | number | null
    gender?: StringNullableFilter<"User"> | string | null
    currentWeight?: FloatNullableFilter<"User"> | number | null
    targetWeight?: FloatNullableFilter<"User"> | number | null
    height?: FloatNullableFilter<"User"> | number | null
    activityLevel?: StringNullableFilter<"User"> | string | null
    dailyCalorieGoal?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    foodEntries?: FoodEntryListRelationFilter
    scannedProducts?: ScannedProductListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    currentWeight?: SortOrderInput | SortOrder
    targetWeight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    activityLevel?: SortOrderInput | SortOrder
    dailyCalorieGoal?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    age?: IntNullableWithAggregatesFilter<"User"> | number | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    currentWeight?: FloatNullableWithAggregatesFilter<"User"> | number | null
    targetWeight?: FloatNullableWithAggregatesFilter<"User"> | number | null
    height?: FloatNullableWithAggregatesFilter<"User"> | number | null
    activityLevel?: StringNullableWithAggregatesFilter<"User"> | string | null
    dailyCalorieGoal?: IntNullableWithAggregatesFilter<"User"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FoodWhereInput = {
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    id?: StringFilter<"Food"> | string
    name?: StringFilter<"Food"> | string
    brand?: StringNullableFilter<"Food"> | string | null
    barcode?: StringNullableFilter<"Food"> | string | null
    caloriesPer100g?: IntFilter<"Food"> | number
    proteinPer100g?: FloatFilter<"Food"> | number
    carbsPer100g?: FloatFilter<"Food"> | number
    fatPer100g?: FloatFilter<"Food"> | number
    fiberPer100g?: FloatNullableFilter<"Food"> | number | null
    sugarPer100g?: FloatNullableFilter<"Food"> | number | null
    sodiumPer100g?: FloatNullableFilter<"Food"> | number | null
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
    foodEntries?: FoodEntryListRelationFilter
    scannedProducts?: ScannedProductListRelationFilter
  }

  export type FoodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrderInput | SortOrder
    sugarPer100g?: SortOrderInput | SortOrder
    sodiumPer100g?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foodEntries?: FoodEntryOrderByRelationAggregateInput
    scannedProducts?: ScannedProductOrderByRelationAggregateInput
  }

  export type FoodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    barcode?: string
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    name?: StringFilter<"Food"> | string
    brand?: StringNullableFilter<"Food"> | string | null
    caloriesPer100g?: IntFilter<"Food"> | number
    proteinPer100g?: FloatFilter<"Food"> | number
    carbsPer100g?: FloatFilter<"Food"> | number
    fatPer100g?: FloatFilter<"Food"> | number
    fiberPer100g?: FloatNullableFilter<"Food"> | number | null
    sugarPer100g?: FloatNullableFilter<"Food"> | number | null
    sodiumPer100g?: FloatNullableFilter<"Food"> | number | null
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
    foodEntries?: FoodEntryListRelationFilter
    scannedProducts?: ScannedProductListRelationFilter
  }, "id" | "barcode">

  export type FoodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrderInput | SortOrder
    sugarPer100g?: SortOrderInput | SortOrder
    sodiumPer100g?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodCountOrderByAggregateInput
    _avg?: FoodAvgOrderByAggregateInput
    _max?: FoodMaxOrderByAggregateInput
    _min?: FoodMinOrderByAggregateInput
    _sum?: FoodSumOrderByAggregateInput
  }

  export type FoodScalarWhereWithAggregatesInput = {
    AND?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    OR?: FoodScalarWhereWithAggregatesInput[]
    NOT?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Food"> | string
    name?: StringWithAggregatesFilter<"Food"> | string
    brand?: StringNullableWithAggregatesFilter<"Food"> | string | null
    barcode?: StringNullableWithAggregatesFilter<"Food"> | string | null
    caloriesPer100g?: IntWithAggregatesFilter<"Food"> | number
    proteinPer100g?: FloatWithAggregatesFilter<"Food"> | number
    carbsPer100g?: FloatWithAggregatesFilter<"Food"> | number
    fatPer100g?: FloatWithAggregatesFilter<"Food"> | number
    fiberPer100g?: FloatNullableWithAggregatesFilter<"Food"> | number | null
    sugarPer100g?: FloatNullableWithAggregatesFilter<"Food"> | number | null
    sodiumPer100g?: FloatNullableWithAggregatesFilter<"Food"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Food"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Food"> | Date | string
  }

  export type FoodEntryWhereInput = {
    AND?: FoodEntryWhereInput | FoodEntryWhereInput[]
    OR?: FoodEntryWhereInput[]
    NOT?: FoodEntryWhereInput | FoodEntryWhereInput[]
    id?: StringFilter<"FoodEntry"> | string
    userId?: StringFilter<"FoodEntry"> | string
    foodId?: StringFilter<"FoodEntry"> | string
    quantity?: FloatFilter<"FoodEntry"> | number
    mealType?: StringFilter<"FoodEntry"> | string
    consumedAt?: DateTimeFilter<"FoodEntry"> | Date | string
    createdAt?: DateTimeFilter<"FoodEntry"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodScalarRelationFilter, FoodWhereInput>
  }

  export type FoodEntryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    mealType?: SortOrder
    consumedAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodOrderByWithRelationInput
  }

  export type FoodEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FoodEntryWhereInput | FoodEntryWhereInput[]
    OR?: FoodEntryWhereInput[]
    NOT?: FoodEntryWhereInput | FoodEntryWhereInput[]
    userId?: StringFilter<"FoodEntry"> | string
    foodId?: StringFilter<"FoodEntry"> | string
    quantity?: FloatFilter<"FoodEntry"> | number
    mealType?: StringFilter<"FoodEntry"> | string
    consumedAt?: DateTimeFilter<"FoodEntry"> | Date | string
    createdAt?: DateTimeFilter<"FoodEntry"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodScalarRelationFilter, FoodWhereInput>
  }, "id">

  export type FoodEntryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    mealType?: SortOrder
    consumedAt?: SortOrder
    createdAt?: SortOrder
    _count?: FoodEntryCountOrderByAggregateInput
    _avg?: FoodEntryAvgOrderByAggregateInput
    _max?: FoodEntryMaxOrderByAggregateInput
    _min?: FoodEntryMinOrderByAggregateInput
    _sum?: FoodEntrySumOrderByAggregateInput
  }

  export type FoodEntryScalarWhereWithAggregatesInput = {
    AND?: FoodEntryScalarWhereWithAggregatesInput | FoodEntryScalarWhereWithAggregatesInput[]
    OR?: FoodEntryScalarWhereWithAggregatesInput[]
    NOT?: FoodEntryScalarWhereWithAggregatesInput | FoodEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodEntry"> | string
    userId?: StringWithAggregatesFilter<"FoodEntry"> | string
    foodId?: StringWithAggregatesFilter<"FoodEntry"> | string
    quantity?: FloatWithAggregatesFilter<"FoodEntry"> | number
    mealType?: StringWithAggregatesFilter<"FoodEntry"> | string
    consumedAt?: DateTimeWithAggregatesFilter<"FoodEntry"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"FoodEntry"> | Date | string
  }

  export type ScannedProductWhereInput = {
    AND?: ScannedProductWhereInput | ScannedProductWhereInput[]
    OR?: ScannedProductWhereInput[]
    NOT?: ScannedProductWhereInput | ScannedProductWhereInput[]
    id?: StringFilter<"ScannedProduct"> | string
    userId?: StringFilter<"ScannedProduct"> | string
    foodId?: StringNullableFilter<"ScannedProduct"> | string | null
    imageUrl?: StringFilter<"ScannedProduct"> | string
    extractedText?: StringNullableFilter<"ScannedProduct"> | string | null
    productName?: StringNullableFilter<"ScannedProduct"> | string | null
    calories?: IntNullableFilter<"ScannedProduct"> | number | null
    protein?: FloatNullableFilter<"ScannedProduct"> | number | null
    carbs?: FloatNullableFilter<"ScannedProduct"> | number | null
    fat?: FloatNullableFilter<"ScannedProduct"> | number | null
    servingSize?: StringNullableFilter<"ScannedProduct"> | string | null
    isVerified?: BoolFilter<"ScannedProduct"> | boolean
    createdAt?: DateTimeFilter<"ScannedProduct"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodNullableScalarRelationFilter, FoodWhereInput> | null
  }

  export type ScannedProductOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrderInput | SortOrder
    imageUrl?: SortOrder
    extractedText?: SortOrderInput | SortOrder
    productName?: SortOrderInput | SortOrder
    calories?: SortOrderInput | SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodOrderByWithRelationInput
  }

  export type ScannedProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScannedProductWhereInput | ScannedProductWhereInput[]
    OR?: ScannedProductWhereInput[]
    NOT?: ScannedProductWhereInput | ScannedProductWhereInput[]
    userId?: StringFilter<"ScannedProduct"> | string
    foodId?: StringNullableFilter<"ScannedProduct"> | string | null
    imageUrl?: StringFilter<"ScannedProduct"> | string
    extractedText?: StringNullableFilter<"ScannedProduct"> | string | null
    productName?: StringNullableFilter<"ScannedProduct"> | string | null
    calories?: IntNullableFilter<"ScannedProduct"> | number | null
    protein?: FloatNullableFilter<"ScannedProduct"> | number | null
    carbs?: FloatNullableFilter<"ScannedProduct"> | number | null
    fat?: FloatNullableFilter<"ScannedProduct"> | number | null
    servingSize?: StringNullableFilter<"ScannedProduct"> | string | null
    isVerified?: BoolFilter<"ScannedProduct"> | boolean
    createdAt?: DateTimeFilter<"ScannedProduct"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    food?: XOR<FoodNullableScalarRelationFilter, FoodWhereInput> | null
  }, "id">

  export type ScannedProductOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrderInput | SortOrder
    imageUrl?: SortOrder
    extractedText?: SortOrderInput | SortOrder
    productName?: SortOrderInput | SortOrder
    calories?: SortOrderInput | SortOrder
    protein?: SortOrderInput | SortOrder
    carbs?: SortOrderInput | SortOrder
    fat?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    _count?: ScannedProductCountOrderByAggregateInput
    _avg?: ScannedProductAvgOrderByAggregateInput
    _max?: ScannedProductMaxOrderByAggregateInput
    _min?: ScannedProductMinOrderByAggregateInput
    _sum?: ScannedProductSumOrderByAggregateInput
  }

  export type ScannedProductScalarWhereWithAggregatesInput = {
    AND?: ScannedProductScalarWhereWithAggregatesInput | ScannedProductScalarWhereWithAggregatesInput[]
    OR?: ScannedProductScalarWhereWithAggregatesInput[]
    NOT?: ScannedProductScalarWhereWithAggregatesInput | ScannedProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScannedProduct"> | string
    userId?: StringWithAggregatesFilter<"ScannedProduct"> | string
    foodId?: StringNullableWithAggregatesFilter<"ScannedProduct"> | string | null
    imageUrl?: StringWithAggregatesFilter<"ScannedProduct"> | string
    extractedText?: StringNullableWithAggregatesFilter<"ScannedProduct"> | string | null
    productName?: StringNullableWithAggregatesFilter<"ScannedProduct"> | string | null
    calories?: IntNullableWithAggregatesFilter<"ScannedProduct"> | number | null
    protein?: FloatNullableWithAggregatesFilter<"ScannedProduct"> | number | null
    carbs?: FloatNullableWithAggregatesFilter<"ScannedProduct"> | number | null
    fat?: FloatNullableWithAggregatesFilter<"ScannedProduct"> | number | null
    servingSize?: StringNullableWithAggregatesFilter<"ScannedProduct"> | string | null
    isVerified?: BoolWithAggregatesFilter<"ScannedProduct"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ScannedProduct"> | Date | string
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: StringFilter<"Recipe"> | string
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringFilter<"Recipe"> | string
    ingredients?: StringFilter<"Recipe"> | string
    cookingTime?: IntNullableFilter<"Recipe"> | number | null
    servings?: IntFilter<"Recipe"> | number
    caloriesPerServing?: IntFilter<"Recipe"> | number
    proteinPerServing?: FloatFilter<"Recipe"> | number
    carbsPerServing?: FloatFilter<"Recipe"> | number
    fatPerServing?: FloatFilter<"Recipe"> | number
    imageUrl?: StringNullableFilter<"Recipe"> | string | null
    sourceUrl?: StringNullableFilter<"Recipe"> | string | null
    category?: StringNullableFilter<"Recipe"> | string | null
    tags?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    instructions?: SortOrder
    ingredients?: SortOrder
    cookingTime?: SortOrderInput | SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    sourceUrl?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    favoriteRecipes?: FavoriteRecipeOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringFilter<"Recipe"> | string
    ingredients?: StringFilter<"Recipe"> | string
    cookingTime?: IntNullableFilter<"Recipe"> | number | null
    servings?: IntFilter<"Recipe"> | number
    caloriesPerServing?: IntFilter<"Recipe"> | number
    proteinPerServing?: FloatFilter<"Recipe"> | number
    carbsPerServing?: FloatFilter<"Recipe"> | number
    fatPerServing?: FloatFilter<"Recipe"> | number
    imageUrl?: StringNullableFilter<"Recipe"> | string | null
    sourceUrl?: StringNullableFilter<"Recipe"> | string | null
    category?: StringNullableFilter<"Recipe"> | string | null
    tags?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    instructions?: SortOrder
    ingredients?: SortOrder
    cookingTime?: SortOrderInput | SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    sourceUrl?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipe"> | string
    title?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    instructions?: StringWithAggregatesFilter<"Recipe"> | string
    ingredients?: StringWithAggregatesFilter<"Recipe"> | string
    cookingTime?: IntNullableWithAggregatesFilter<"Recipe"> | number | null
    servings?: IntWithAggregatesFilter<"Recipe"> | number
    caloriesPerServing?: IntWithAggregatesFilter<"Recipe"> | number
    proteinPerServing?: FloatWithAggregatesFilter<"Recipe"> | number
    carbsPerServing?: FloatWithAggregatesFilter<"Recipe"> | number
    fatPerServing?: FloatWithAggregatesFilter<"Recipe"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    sourceUrl?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    category?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    tags?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
  }

  export type FavoriteRecipeWhereInput = {
    AND?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    OR?: FavoriteRecipeWhereInput[]
    NOT?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    id?: StringFilter<"FavoriteRecipe"> | string
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: StringFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
  }

  export type FavoriteRecipeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    recipe?: RecipeOrderByWithRelationInput
  }

  export type FavoriteRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_recipeId?: FavoriteRecipeUserIdRecipeIdCompoundUniqueInput
    AND?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    OR?: FavoriteRecipeWhereInput[]
    NOT?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: StringFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeScalarRelationFilter, RecipeWhereInput>
  }, "id" | "userId_recipeId">

  export type FavoriteRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
    _count?: FavoriteRecipeCountOrderByAggregateInput
    _max?: FavoriteRecipeMaxOrderByAggregateInput
    _min?: FavoriteRecipeMinOrderByAggregateInput
  }

  export type FavoriteRecipeScalarWhereWithAggregatesInput = {
    AND?: FavoriteRecipeScalarWhereWithAggregatesInput | FavoriteRecipeScalarWhereWithAggregatesInput[]
    OR?: FavoriteRecipeScalarWhereWithAggregatesInput[]
    NOT?: FavoriteRecipeScalarWhereWithAggregatesInput | FavoriteRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    userId?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    recipeId?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FavoriteRecipe"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryCreateNestedManyWithoutUserInput
    scannedProducts?: ScannedProductCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryUncheckedCreateNestedManyWithoutUserInput
    scannedProducts?: ScannedProductUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUpdateManyWithoutUserNestedInput
    scannedProducts?: ScannedProductUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUncheckedUpdateManyWithoutUserNestedInput
    scannedProducts?: ScannedProductUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodCreateInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryCreateNestedManyWithoutFoodInput
    scannedProducts?: ScannedProductCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryUncheckedCreateNestedManyWithoutFoodInput
    scannedProducts?: ScannedProductUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUpdateManyWithoutFoodNestedInput
    scannedProducts?: ScannedProductUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUncheckedUpdateManyWithoutFoodNestedInput
    scannedProducts?: ScannedProductUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodCreateManyInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryCreateInput = {
    id?: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodEntriesInput
    food: FoodCreateNestedOneWithoutFoodEntriesInput
  }

  export type FoodEntryUncheckedCreateInput = {
    id?: string
    userId: string
    foodId: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
  }

  export type FoodEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodEntriesNestedInput
    food?: FoodUpdateOneRequiredWithoutFoodEntriesNestedInput
  }

  export type FoodEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryCreateManyInput = {
    id?: string
    userId: string
    foodId: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
  }

  export type FoodEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductCreateInput = {
    id?: string
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutScannedProductsInput
    food?: FoodCreateNestedOneWithoutScannedProductsInput
  }

  export type ScannedProductUncheckedCreateInput = {
    id?: string
    userId: string
    foodId?: string | null
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type ScannedProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutScannedProductsNestedInput
    food?: FoodUpdateOneWithoutScannedProductsNestedInput
  }

  export type ScannedProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    foodId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductCreateManyInput = {
    id?: string
    userId: string
    foodId?: string | null
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type ScannedProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    foodId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeCreateInput = {
    id?: string
    title: string
    description?: string | null
    instructions: string
    ingredients: string
    cookingTime?: number | null
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl?: string | null
    sourceUrl?: string | null
    category?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    instructions: string
    ingredients: string
    cookingTime?: number | null
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl?: string | null
    sourceUrl?: string | null
    category?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    cookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: IntFieldUpdateOperationsInput | number
    caloriesPerServing?: IntFieldUpdateOperationsInput | number
    proteinPerServing?: FloatFieldUpdateOperationsInput | number
    carbsPerServing?: FloatFieldUpdateOperationsInput | number
    fatPerServing?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    cookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: IntFieldUpdateOperationsInput | number
    caloriesPerServing?: IntFieldUpdateOperationsInput | number
    proteinPerServing?: FloatFieldUpdateOperationsInput | number
    carbsPerServing?: FloatFieldUpdateOperationsInput | number
    fatPerServing?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    instructions: string
    ingredients: string
    cookingTime?: number | null
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl?: string | null
    sourceUrl?: string | null
    category?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    cookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: IntFieldUpdateOperationsInput | number
    caloriesPerServing?: IntFieldUpdateOperationsInput | number
    proteinPerServing?: FloatFieldUpdateOperationsInput | number
    carbsPerServing?: FloatFieldUpdateOperationsInput | number
    fatPerServing?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    cookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: IntFieldUpdateOperationsInput | number
    caloriesPerServing?: IntFieldUpdateOperationsInput | number
    proteinPerServing?: FloatFieldUpdateOperationsInput | number
    carbsPerServing?: FloatFieldUpdateOperationsInput | number
    fatPerServing?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteRecipesInput
    recipe: RecipeCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateInput = {
    id?: string
    userId: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput
    recipe?: RecipeUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateManyInput = {
    id?: string
    userId: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FoodEntryListRelationFilter = {
    every?: FoodEntryWhereInput
    some?: FoodEntryWhereInput
    none?: FoodEntryWhereInput
  }

  export type ScannedProductListRelationFilter = {
    every?: ScannedProductWhereInput
    some?: ScannedProductWhereInput
    none?: ScannedProductWhereInput
  }

  export type FavoriteRecipeListRelationFilter = {
    every?: FavoriteRecipeWhereInput
    some?: FavoriteRecipeWhereInput
    none?: FavoriteRecipeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FoodEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScannedProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteRecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    height?: SortOrder
    activityLevel?: SortOrder
    dailyCalorieGoal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    height?: SortOrder
    dailyCalorieGoal?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    height?: SortOrder
    activityLevel?: SortOrder
    dailyCalorieGoal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    height?: SortOrder
    activityLevel?: SortOrder
    dailyCalorieGoal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
    currentWeight?: SortOrder
    targetWeight?: SortOrder
    height?: SortOrder
    dailyCalorieGoal?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FoodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    barcode?: SortOrder
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrder
    sugarPer100g?: SortOrder
    sodiumPer100g?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodAvgOrderByAggregateInput = {
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrder
    sugarPer100g?: SortOrder
    sodiumPer100g?: SortOrder
  }

  export type FoodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    barcode?: SortOrder
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrder
    sugarPer100g?: SortOrder
    sodiumPer100g?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    barcode?: SortOrder
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrder
    sugarPer100g?: SortOrder
    sodiumPer100g?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodSumOrderByAggregateInput = {
    caloriesPer100g?: SortOrder
    proteinPer100g?: SortOrder
    carbsPer100g?: SortOrder
    fatPer100g?: SortOrder
    fiberPer100g?: SortOrder
    sugarPer100g?: SortOrder
    sodiumPer100g?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FoodScalarRelationFilter = {
    is?: FoodWhereInput
    isNot?: FoodWhereInput
  }

  export type FoodEntryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    mealType?: SortOrder
    consumedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodEntryAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type FoodEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    mealType?: SortOrder
    consumedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodEntryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    quantity?: SortOrder
    mealType?: SortOrder
    consumedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodEntrySumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FoodNullableScalarRelationFilter = {
    is?: FoodWhereInput | null
    isNot?: FoodWhereInput | null
  }

  export type ScannedProductCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    imageUrl?: SortOrder
    extractedText?: SortOrder
    productName?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannedProductAvgOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type ScannedProductMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    imageUrl?: SortOrder
    extractedText?: SortOrder
    productName?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannedProductMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    imageUrl?: SortOrder
    extractedText?: SortOrder
    productName?: SortOrder
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
    servingSize?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
  }

  export type ScannedProductSumOrderByAggregateInput = {
    calories?: SortOrder
    protein?: SortOrder
    carbs?: SortOrder
    fat?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    ingredients?: SortOrder
    cookingTime?: SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
    imageUrl?: SortOrder
    sourceUrl?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    cookingTime?: SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    ingredients?: SortOrder
    cookingTime?: SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
    imageUrl?: SortOrder
    sourceUrl?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    ingredients?: SortOrder
    cookingTime?: SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
    imageUrl?: SortOrder
    sourceUrl?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    cookingTime?: SortOrder
    servings?: SortOrder
    caloriesPerServing?: SortOrder
    proteinPerServing?: SortOrder
    carbsPerServing?: SortOrder
    fatPerServing?: SortOrder
  }

  export type RecipeScalarRelationFilter = {
    is?: RecipeWhereInput
    isNot?: RecipeWhereInput
  }

  export type FavoriteRecipeUserIdRecipeIdCompoundUniqueInput = {
    userId: string
    recipeId: string
  }

  export type FavoriteRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
  }

  export type FoodEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodEntryCreateWithoutUserInput, FoodEntryUncheckedCreateWithoutUserInput> | FoodEntryCreateWithoutUserInput[] | FoodEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutUserInput | FoodEntryCreateOrConnectWithoutUserInput[]
    createMany?: FoodEntryCreateManyUserInputEnvelope
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
  }

  export type ScannedProductCreateNestedManyWithoutUserInput = {
    create?: XOR<ScannedProductCreateWithoutUserInput, ScannedProductUncheckedCreateWithoutUserInput> | ScannedProductCreateWithoutUserInput[] | ScannedProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutUserInput | ScannedProductCreateOrConnectWithoutUserInput[]
    createMany?: ScannedProductCreateManyUserInputEnvelope
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
  }

  export type FavoriteRecipeCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type FoodEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FoodEntryCreateWithoutUserInput, FoodEntryUncheckedCreateWithoutUserInput> | FoodEntryCreateWithoutUserInput[] | FoodEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutUserInput | FoodEntryCreateOrConnectWithoutUserInput[]
    createMany?: FoodEntryCreateManyUserInputEnvelope
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
  }

  export type ScannedProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScannedProductCreateWithoutUserInput, ScannedProductUncheckedCreateWithoutUserInput> | ScannedProductCreateWithoutUserInput[] | ScannedProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutUserInput | ScannedProductCreateOrConnectWithoutUserInput[]
    createMany?: ScannedProductCreateManyUserInputEnvelope
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
  }

  export type FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FoodEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodEntryCreateWithoutUserInput, FoodEntryUncheckedCreateWithoutUserInput> | FoodEntryCreateWithoutUserInput[] | FoodEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutUserInput | FoodEntryCreateOrConnectWithoutUserInput[]
    upsert?: FoodEntryUpsertWithWhereUniqueWithoutUserInput | FoodEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodEntryCreateManyUserInputEnvelope
    set?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    disconnect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    delete?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    update?: FoodEntryUpdateWithWhereUniqueWithoutUserInput | FoodEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodEntryUpdateManyWithWhereWithoutUserInput | FoodEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodEntryScalarWhereInput | FoodEntryScalarWhereInput[]
  }

  export type ScannedProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScannedProductCreateWithoutUserInput, ScannedProductUncheckedCreateWithoutUserInput> | ScannedProductCreateWithoutUserInput[] | ScannedProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutUserInput | ScannedProductCreateOrConnectWithoutUserInput[]
    upsert?: ScannedProductUpsertWithWhereUniqueWithoutUserInput | ScannedProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScannedProductCreateManyUserInputEnvelope
    set?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    disconnect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    delete?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    update?: ScannedProductUpdateWithWhereUniqueWithoutUserInput | ScannedProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScannedProductUpdateManyWithWhereWithoutUserInput | ScannedProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScannedProductScalarWhereInput | ScannedProductScalarWhereInput[]
  }

  export type FavoriteRecipeUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput | FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput | FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutUserInput | FavoriteRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type FoodEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FoodEntryCreateWithoutUserInput, FoodEntryUncheckedCreateWithoutUserInput> | FoodEntryCreateWithoutUserInput[] | FoodEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutUserInput | FoodEntryCreateOrConnectWithoutUserInput[]
    upsert?: FoodEntryUpsertWithWhereUniqueWithoutUserInput | FoodEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FoodEntryCreateManyUserInputEnvelope
    set?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    disconnect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    delete?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    update?: FoodEntryUpdateWithWhereUniqueWithoutUserInput | FoodEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FoodEntryUpdateManyWithWhereWithoutUserInput | FoodEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FoodEntryScalarWhereInput | FoodEntryScalarWhereInput[]
  }

  export type ScannedProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScannedProductCreateWithoutUserInput, ScannedProductUncheckedCreateWithoutUserInput> | ScannedProductCreateWithoutUserInput[] | ScannedProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutUserInput | ScannedProductCreateOrConnectWithoutUserInput[]
    upsert?: ScannedProductUpsertWithWhereUniqueWithoutUserInput | ScannedProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScannedProductCreateManyUserInputEnvelope
    set?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    disconnect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    delete?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    update?: ScannedProductUpdateWithWhereUniqueWithoutUserInput | ScannedProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScannedProductUpdateManyWithWhereWithoutUserInput | ScannedProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScannedProductScalarWhereInput | ScannedProductScalarWhereInput[]
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput | FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput | FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutUserInput | FavoriteRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type FoodEntryCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodEntryCreateWithoutFoodInput, FoodEntryUncheckedCreateWithoutFoodInput> | FoodEntryCreateWithoutFoodInput[] | FoodEntryUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutFoodInput | FoodEntryCreateOrConnectWithoutFoodInput[]
    createMany?: FoodEntryCreateManyFoodInputEnvelope
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
  }

  export type ScannedProductCreateNestedManyWithoutFoodInput = {
    create?: XOR<ScannedProductCreateWithoutFoodInput, ScannedProductUncheckedCreateWithoutFoodInput> | ScannedProductCreateWithoutFoodInput[] | ScannedProductUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutFoodInput | ScannedProductCreateOrConnectWithoutFoodInput[]
    createMany?: ScannedProductCreateManyFoodInputEnvelope
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
  }

  export type FoodEntryUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<FoodEntryCreateWithoutFoodInput, FoodEntryUncheckedCreateWithoutFoodInput> | FoodEntryCreateWithoutFoodInput[] | FoodEntryUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutFoodInput | FoodEntryCreateOrConnectWithoutFoodInput[]
    createMany?: FoodEntryCreateManyFoodInputEnvelope
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
  }

  export type ScannedProductUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<ScannedProductCreateWithoutFoodInput, ScannedProductUncheckedCreateWithoutFoodInput> | ScannedProductCreateWithoutFoodInput[] | ScannedProductUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutFoodInput | ScannedProductCreateOrConnectWithoutFoodInput[]
    createMany?: ScannedProductCreateManyFoodInputEnvelope
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FoodEntryUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodEntryCreateWithoutFoodInput, FoodEntryUncheckedCreateWithoutFoodInput> | FoodEntryCreateWithoutFoodInput[] | FoodEntryUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutFoodInput | FoodEntryCreateOrConnectWithoutFoodInput[]
    upsert?: FoodEntryUpsertWithWhereUniqueWithoutFoodInput | FoodEntryUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodEntryCreateManyFoodInputEnvelope
    set?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    disconnect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    delete?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    update?: FoodEntryUpdateWithWhereUniqueWithoutFoodInput | FoodEntryUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodEntryUpdateManyWithWhereWithoutFoodInput | FoodEntryUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodEntryScalarWhereInput | FoodEntryScalarWhereInput[]
  }

  export type ScannedProductUpdateManyWithoutFoodNestedInput = {
    create?: XOR<ScannedProductCreateWithoutFoodInput, ScannedProductUncheckedCreateWithoutFoodInput> | ScannedProductCreateWithoutFoodInput[] | ScannedProductUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutFoodInput | ScannedProductCreateOrConnectWithoutFoodInput[]
    upsert?: ScannedProductUpsertWithWhereUniqueWithoutFoodInput | ScannedProductUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: ScannedProductCreateManyFoodInputEnvelope
    set?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    disconnect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    delete?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    update?: ScannedProductUpdateWithWhereUniqueWithoutFoodInput | ScannedProductUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: ScannedProductUpdateManyWithWhereWithoutFoodInput | ScannedProductUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: ScannedProductScalarWhereInput | ScannedProductScalarWhereInput[]
  }

  export type FoodEntryUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<FoodEntryCreateWithoutFoodInput, FoodEntryUncheckedCreateWithoutFoodInput> | FoodEntryCreateWithoutFoodInput[] | FoodEntryUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: FoodEntryCreateOrConnectWithoutFoodInput | FoodEntryCreateOrConnectWithoutFoodInput[]
    upsert?: FoodEntryUpsertWithWhereUniqueWithoutFoodInput | FoodEntryUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: FoodEntryCreateManyFoodInputEnvelope
    set?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    disconnect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    delete?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    connect?: FoodEntryWhereUniqueInput | FoodEntryWhereUniqueInput[]
    update?: FoodEntryUpdateWithWhereUniqueWithoutFoodInput | FoodEntryUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: FoodEntryUpdateManyWithWhereWithoutFoodInput | FoodEntryUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: FoodEntryScalarWhereInput | FoodEntryScalarWhereInput[]
  }

  export type ScannedProductUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<ScannedProductCreateWithoutFoodInput, ScannedProductUncheckedCreateWithoutFoodInput> | ScannedProductCreateWithoutFoodInput[] | ScannedProductUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: ScannedProductCreateOrConnectWithoutFoodInput | ScannedProductCreateOrConnectWithoutFoodInput[]
    upsert?: ScannedProductUpsertWithWhereUniqueWithoutFoodInput | ScannedProductUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: ScannedProductCreateManyFoodInputEnvelope
    set?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    disconnect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    delete?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    connect?: ScannedProductWhereUniqueInput | ScannedProductWhereUniqueInput[]
    update?: ScannedProductUpdateWithWhereUniqueWithoutFoodInput | ScannedProductUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: ScannedProductUpdateManyWithWhereWithoutFoodInput | ScannedProductUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: ScannedProductScalarWhereInput | ScannedProductScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFoodEntriesInput = {
    create?: XOR<UserCreateWithoutFoodEntriesInput, UserUncheckedCreateWithoutFoodEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type FoodCreateNestedOneWithoutFoodEntriesInput = {
    create?: XOR<FoodCreateWithoutFoodEntriesInput, FoodUncheckedCreateWithoutFoodEntriesInput>
    connectOrCreate?: FoodCreateOrConnectWithoutFoodEntriesInput
    connect?: FoodWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFoodEntriesNestedInput = {
    create?: XOR<UserCreateWithoutFoodEntriesInput, UserUncheckedCreateWithoutFoodEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodEntriesInput
    upsert?: UserUpsertWithoutFoodEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodEntriesInput, UserUpdateWithoutFoodEntriesInput>, UserUncheckedUpdateWithoutFoodEntriesInput>
  }

  export type FoodUpdateOneRequiredWithoutFoodEntriesNestedInput = {
    create?: XOR<FoodCreateWithoutFoodEntriesInput, FoodUncheckedCreateWithoutFoodEntriesInput>
    connectOrCreate?: FoodCreateOrConnectWithoutFoodEntriesInput
    upsert?: FoodUpsertWithoutFoodEntriesInput
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutFoodEntriesInput, FoodUpdateWithoutFoodEntriesInput>, FoodUncheckedUpdateWithoutFoodEntriesInput>
  }

  export type UserCreateNestedOneWithoutScannedProductsInput = {
    create?: XOR<UserCreateWithoutScannedProductsInput, UserUncheckedCreateWithoutScannedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScannedProductsInput
    connect?: UserWhereUniqueInput
  }

  export type FoodCreateNestedOneWithoutScannedProductsInput = {
    create?: XOR<FoodCreateWithoutScannedProductsInput, FoodUncheckedCreateWithoutScannedProductsInput>
    connectOrCreate?: FoodCreateOrConnectWithoutScannedProductsInput
    connect?: FoodWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutScannedProductsNestedInput = {
    create?: XOR<UserCreateWithoutScannedProductsInput, UserUncheckedCreateWithoutScannedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScannedProductsInput
    upsert?: UserUpsertWithoutScannedProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScannedProductsInput, UserUpdateWithoutScannedProductsInput>, UserUncheckedUpdateWithoutScannedProductsInput>
  }

  export type FoodUpdateOneWithoutScannedProductsNestedInput = {
    create?: XOR<FoodCreateWithoutScannedProductsInput, FoodUncheckedCreateWithoutScannedProductsInput>
    connectOrCreate?: FoodCreateOrConnectWithoutScannedProductsInput
    upsert?: FoodUpsertWithoutScannedProductsInput
    disconnect?: FoodWhereInput | boolean
    delete?: FoodWhereInput | boolean
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutScannedProductsInput, FoodUpdateWithoutScannedProductsInput>, FoodUncheckedUpdateWithoutScannedProductsInput>
  }

  export type FavoriteRecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type FavoriteRecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput | FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput | FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFavoriteRecipesInput = {
    create?: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeCreateNestedOneWithoutFavoriteRecipesInput = {
    create?: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFavoriteRecipesInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteRecipesInput
    upsert?: UserUpsertWithoutFavoriteRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteRecipesInput, UserUpdateWithoutFavoriteRecipesInput>, UserUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type RecipeUpdateOneRequiredWithoutFavoriteRecipesNestedInput = {
    create?: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFavoriteRecipesInput
    upsert?: RecipeUpsertWithoutFavoriteRecipesInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutFavoriteRecipesInput, RecipeUpdateWithoutFavoriteRecipesInput>, RecipeUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FoodEntryCreateWithoutUserInput = {
    id?: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
    food: FoodCreateNestedOneWithoutFoodEntriesInput
  }

  export type FoodEntryUncheckedCreateWithoutUserInput = {
    id?: string
    foodId: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
  }

  export type FoodEntryCreateOrConnectWithoutUserInput = {
    where: FoodEntryWhereUniqueInput
    create: XOR<FoodEntryCreateWithoutUserInput, FoodEntryUncheckedCreateWithoutUserInput>
  }

  export type FoodEntryCreateManyUserInputEnvelope = {
    data: FoodEntryCreateManyUserInput | FoodEntryCreateManyUserInput[]
  }

  export type ScannedProductCreateWithoutUserInput = {
    id?: string
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    food?: FoodCreateNestedOneWithoutScannedProductsInput
  }

  export type ScannedProductUncheckedCreateWithoutUserInput = {
    id?: string
    foodId?: string | null
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type ScannedProductCreateOrConnectWithoutUserInput = {
    where: ScannedProductWhereUniqueInput
    create: XOR<ScannedProductCreateWithoutUserInput, ScannedProductUncheckedCreateWithoutUserInput>
  }

  export type ScannedProductCreateManyUserInputEnvelope = {
    data: ScannedProductCreateManyUserInput | ScannedProductCreateManyUserInput[]
  }

  export type FavoriteRecipeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeCreateOrConnectWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    create: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput>
  }

  export type FavoriteRecipeCreateManyUserInputEnvelope = {
    data: FavoriteRecipeCreateManyUserInput | FavoriteRecipeCreateManyUserInput[]
  }

  export type FoodEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: FoodEntryWhereUniqueInput
    update: XOR<FoodEntryUpdateWithoutUserInput, FoodEntryUncheckedUpdateWithoutUserInput>
    create: XOR<FoodEntryCreateWithoutUserInput, FoodEntryUncheckedCreateWithoutUserInput>
  }

  export type FoodEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: FoodEntryWhereUniqueInput
    data: XOR<FoodEntryUpdateWithoutUserInput, FoodEntryUncheckedUpdateWithoutUserInput>
  }

  export type FoodEntryUpdateManyWithWhereWithoutUserInput = {
    where: FoodEntryScalarWhereInput
    data: XOR<FoodEntryUpdateManyMutationInput, FoodEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type FoodEntryScalarWhereInput = {
    AND?: FoodEntryScalarWhereInput | FoodEntryScalarWhereInput[]
    OR?: FoodEntryScalarWhereInput[]
    NOT?: FoodEntryScalarWhereInput | FoodEntryScalarWhereInput[]
    id?: StringFilter<"FoodEntry"> | string
    userId?: StringFilter<"FoodEntry"> | string
    foodId?: StringFilter<"FoodEntry"> | string
    quantity?: FloatFilter<"FoodEntry"> | number
    mealType?: StringFilter<"FoodEntry"> | string
    consumedAt?: DateTimeFilter<"FoodEntry"> | Date | string
    createdAt?: DateTimeFilter<"FoodEntry"> | Date | string
  }

  export type ScannedProductUpsertWithWhereUniqueWithoutUserInput = {
    where: ScannedProductWhereUniqueInput
    update: XOR<ScannedProductUpdateWithoutUserInput, ScannedProductUncheckedUpdateWithoutUserInput>
    create: XOR<ScannedProductCreateWithoutUserInput, ScannedProductUncheckedCreateWithoutUserInput>
  }

  export type ScannedProductUpdateWithWhereUniqueWithoutUserInput = {
    where: ScannedProductWhereUniqueInput
    data: XOR<ScannedProductUpdateWithoutUserInput, ScannedProductUncheckedUpdateWithoutUserInput>
  }

  export type ScannedProductUpdateManyWithWhereWithoutUserInput = {
    where: ScannedProductScalarWhereInput
    data: XOR<ScannedProductUpdateManyMutationInput, ScannedProductUncheckedUpdateManyWithoutUserInput>
  }

  export type ScannedProductScalarWhereInput = {
    AND?: ScannedProductScalarWhereInput | ScannedProductScalarWhereInput[]
    OR?: ScannedProductScalarWhereInput[]
    NOT?: ScannedProductScalarWhereInput | ScannedProductScalarWhereInput[]
    id?: StringFilter<"ScannedProduct"> | string
    userId?: StringFilter<"ScannedProduct"> | string
    foodId?: StringNullableFilter<"ScannedProduct"> | string | null
    imageUrl?: StringFilter<"ScannedProduct"> | string
    extractedText?: StringNullableFilter<"ScannedProduct"> | string | null
    productName?: StringNullableFilter<"ScannedProduct"> | string | null
    calories?: IntNullableFilter<"ScannedProduct"> | number | null
    protein?: FloatNullableFilter<"ScannedProduct"> | number | null
    carbs?: FloatNullableFilter<"ScannedProduct"> | number | null
    fat?: FloatNullableFilter<"ScannedProduct"> | number | null
    servingSize?: StringNullableFilter<"ScannedProduct"> | string | null
    isVerified?: BoolFilter<"ScannedProduct"> | boolean
    createdAt?: DateTimeFilter<"ScannedProduct"> | Date | string
  }

  export type FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    update: XOR<FavoriteRecipeUpdateWithoutUserInput, FavoriteRecipeUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput>
  }

  export type FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    data: XOR<FavoriteRecipeUpdateWithoutUserInput, FavoriteRecipeUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteRecipeUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteRecipeScalarWhereInput
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteRecipeScalarWhereInput = {
    AND?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
    OR?: FavoriteRecipeScalarWhereInput[]
    NOT?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
    id?: StringFilter<"FavoriteRecipe"> | string
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: StringFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
  }

  export type FoodEntryCreateWithoutFoodInput = {
    id?: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFoodEntriesInput
  }

  export type FoodEntryUncheckedCreateWithoutFoodInput = {
    id?: string
    userId: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
  }

  export type FoodEntryCreateOrConnectWithoutFoodInput = {
    where: FoodEntryWhereUniqueInput
    create: XOR<FoodEntryCreateWithoutFoodInput, FoodEntryUncheckedCreateWithoutFoodInput>
  }

  export type FoodEntryCreateManyFoodInputEnvelope = {
    data: FoodEntryCreateManyFoodInput | FoodEntryCreateManyFoodInput[]
  }

  export type ScannedProductCreateWithoutFoodInput = {
    id?: string
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutScannedProductsInput
  }

  export type ScannedProductUncheckedCreateWithoutFoodInput = {
    id?: string
    userId: string
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type ScannedProductCreateOrConnectWithoutFoodInput = {
    where: ScannedProductWhereUniqueInput
    create: XOR<ScannedProductCreateWithoutFoodInput, ScannedProductUncheckedCreateWithoutFoodInput>
  }

  export type ScannedProductCreateManyFoodInputEnvelope = {
    data: ScannedProductCreateManyFoodInput | ScannedProductCreateManyFoodInput[]
  }

  export type FoodEntryUpsertWithWhereUniqueWithoutFoodInput = {
    where: FoodEntryWhereUniqueInput
    update: XOR<FoodEntryUpdateWithoutFoodInput, FoodEntryUncheckedUpdateWithoutFoodInput>
    create: XOR<FoodEntryCreateWithoutFoodInput, FoodEntryUncheckedCreateWithoutFoodInput>
  }

  export type FoodEntryUpdateWithWhereUniqueWithoutFoodInput = {
    where: FoodEntryWhereUniqueInput
    data: XOR<FoodEntryUpdateWithoutFoodInput, FoodEntryUncheckedUpdateWithoutFoodInput>
  }

  export type FoodEntryUpdateManyWithWhereWithoutFoodInput = {
    where: FoodEntryScalarWhereInput
    data: XOR<FoodEntryUpdateManyMutationInput, FoodEntryUncheckedUpdateManyWithoutFoodInput>
  }

  export type ScannedProductUpsertWithWhereUniqueWithoutFoodInput = {
    where: ScannedProductWhereUniqueInput
    update: XOR<ScannedProductUpdateWithoutFoodInput, ScannedProductUncheckedUpdateWithoutFoodInput>
    create: XOR<ScannedProductCreateWithoutFoodInput, ScannedProductUncheckedCreateWithoutFoodInput>
  }

  export type ScannedProductUpdateWithWhereUniqueWithoutFoodInput = {
    where: ScannedProductWhereUniqueInput
    data: XOR<ScannedProductUpdateWithoutFoodInput, ScannedProductUncheckedUpdateWithoutFoodInput>
  }

  export type ScannedProductUpdateManyWithWhereWithoutFoodInput = {
    where: ScannedProductScalarWhereInput
    data: XOR<ScannedProductUpdateManyMutationInput, ScannedProductUncheckedUpdateManyWithoutFoodInput>
  }

  export type UserCreateWithoutFoodEntriesInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scannedProducts?: ScannedProductCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodEntriesInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scannedProducts?: ScannedProductUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodEntriesInput, UserUncheckedCreateWithoutFoodEntriesInput>
  }

  export type FoodCreateWithoutFoodEntriesInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scannedProducts?: ScannedProductCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutFoodEntriesInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scannedProducts?: ScannedProductUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutFoodEntriesInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutFoodEntriesInput, FoodUncheckedCreateWithoutFoodEntriesInput>
  }

  export type UserUpsertWithoutFoodEntriesInput = {
    update: XOR<UserUpdateWithoutFoodEntriesInput, UserUncheckedUpdateWithoutFoodEntriesInput>
    create: XOR<UserCreateWithoutFoodEntriesInput, UserUncheckedCreateWithoutFoodEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodEntriesInput, UserUncheckedUpdateWithoutFoodEntriesInput>
  }

  export type UserUpdateWithoutFoodEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scannedProducts?: ScannedProductUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scannedProducts?: ScannedProductUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodUpsertWithoutFoodEntriesInput = {
    update: XOR<FoodUpdateWithoutFoodEntriesInput, FoodUncheckedUpdateWithoutFoodEntriesInput>
    create: XOR<FoodCreateWithoutFoodEntriesInput, FoodUncheckedCreateWithoutFoodEntriesInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutFoodEntriesInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutFoodEntriesInput, FoodUncheckedUpdateWithoutFoodEntriesInput>
  }

  export type FoodUpdateWithoutFoodEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scannedProducts?: ScannedProductUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutFoodEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scannedProducts?: ScannedProductUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type UserCreateWithoutScannedProductsInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScannedProductsInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScannedProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScannedProductsInput, UserUncheckedCreateWithoutScannedProductsInput>
  }

  export type FoodCreateWithoutScannedProductsInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateWithoutScannedProductsInput = {
    id?: string
    name: string
    brand?: string | null
    barcode?: string | null
    caloriesPer100g: number
    proteinPer100g: number
    carbsPer100g: number
    fatPer100g: number
    fiberPer100g?: number | null
    sugarPer100g?: number | null
    sodiumPer100g?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodCreateOrConnectWithoutScannedProductsInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutScannedProductsInput, FoodUncheckedCreateWithoutScannedProductsInput>
  }

  export type UserUpsertWithoutScannedProductsInput = {
    update: XOR<UserUpdateWithoutScannedProductsInput, UserUncheckedUpdateWithoutScannedProductsInput>
    create: XOR<UserCreateWithoutScannedProductsInput, UserUncheckedCreateWithoutScannedProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScannedProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScannedProductsInput, UserUncheckedUpdateWithoutScannedProductsInput>
  }

  export type UserUpdateWithoutScannedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScannedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodUpsertWithoutScannedProductsInput = {
    update: XOR<FoodUpdateWithoutScannedProductsInput, FoodUncheckedUpdateWithoutScannedProductsInput>
    create: XOR<FoodCreateWithoutScannedProductsInput, FoodUncheckedCreateWithoutScannedProductsInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutScannedProductsInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutScannedProductsInput, FoodUncheckedUpdateWithoutScannedProductsInput>
  }

  export type FoodUpdateWithoutScannedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateWithoutScannedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    caloriesPer100g?: IntFieldUpdateOperationsInput | number
    proteinPer100g?: FloatFieldUpdateOperationsInput | number
    carbsPer100g?: FloatFieldUpdateOperationsInput | number
    fatPer100g?: FloatFieldUpdateOperationsInput | number
    fiberPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sugarPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    sodiumPer100g?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FavoriteRecipeCreateWithoutRecipeInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeCreateOrConnectWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    create: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type FavoriteRecipeCreateManyRecipeInputEnvelope = {
    data: FavoriteRecipeCreateManyRecipeInput | FavoriteRecipeCreateManyRecipeInput[]
  }

  export type FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    update: XOR<FavoriteRecipeUpdateWithoutRecipeInput, FavoriteRecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    data: XOR<FavoriteRecipeUpdateWithoutRecipeInput, FavoriteRecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: FavoriteRecipeScalarWhereInput
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type UserCreateWithoutFavoriteRecipesInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryCreateNestedManyWithoutUserInput
    scannedProducts?: ScannedProductCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteRecipesInput = {
    id?: string
    email: string
    password: string
    name: string
    age?: number | null
    gender?: string | null
    currentWeight?: number | null
    targetWeight?: number | null
    height?: number | null
    activityLevel?: string | null
    dailyCalorieGoal?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foodEntries?: FoodEntryUncheckedCreateNestedManyWithoutUserInput
    scannedProducts?: ScannedProductUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
  }

  export type RecipeCreateWithoutFavoriteRecipesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: string
    ingredients: string
    cookingTime?: number | null
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl?: string | null
    sourceUrl?: string | null
    category?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeUncheckedCreateWithoutFavoriteRecipesInput = {
    id?: string
    title: string
    description?: string | null
    instructions: string
    ingredients: string
    cookingTime?: number | null
    servings: number
    caloriesPerServing: number
    proteinPerServing: number
    carbsPerServing: number
    fatPerServing: number
    imageUrl?: string | null
    sourceUrl?: string | null
    category?: string | null
    tags?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeCreateOrConnectWithoutFavoriteRecipesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
  }

  export type UserUpsertWithoutFavoriteRecipesInput = {
    update: XOR<UserUpdateWithoutFavoriteRecipesInput, UserUncheckedUpdateWithoutFavoriteRecipesInput>
    create: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteRecipesInput, UserUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type UserUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUpdateManyWithoutUserNestedInput
    scannedProducts?: ScannedProductUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    currentWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    targetWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    activityLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dailyCalorieGoal?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foodEntries?: FoodEntryUncheckedUpdateManyWithoutUserNestedInput
    scannedProducts?: ScannedProductUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeUpsertWithoutFavoriteRecipesInput = {
    update: XOR<RecipeUpdateWithoutFavoriteRecipesInput, RecipeUncheckedUpdateWithoutFavoriteRecipesInput>
    create: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutFavoriteRecipesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutFavoriteRecipesInput, RecipeUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type RecipeUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    cookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: IntFieldUpdateOperationsInput | number
    caloriesPerServing?: IntFieldUpdateOperationsInput | number
    proteinPerServing?: FloatFieldUpdateOperationsInput | number
    carbsPerServing?: FloatFieldUpdateOperationsInput | number
    fatPerServing?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeUncheckedUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    cookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servings?: IntFieldUpdateOperationsInput | number
    caloriesPerServing?: IntFieldUpdateOperationsInput | number
    proteinPerServing?: FloatFieldUpdateOperationsInput | number
    carbsPerServing?: FloatFieldUpdateOperationsInput | number
    fatPerServing?: FloatFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryCreateManyUserInput = {
    id?: string
    foodId: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
  }

  export type ScannedProductCreateManyUserInput = {
    id?: string
    foodId?: string | null
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type FavoriteRecipeCreateManyUserInput = {
    id?: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FoodEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneRequiredWithoutFoodEntriesNestedInput
  }

  export type FoodEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneWithoutScannedProductsNestedInput
  }

  export type ScannedProductUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    foodId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryCreateManyFoodInput = {
    id?: string
    userId: string
    quantity: number
    mealType: string
    consumedAt?: Date | string
    createdAt?: Date | string
  }

  export type ScannedProductCreateManyFoodInput = {
    id?: string
    userId: string
    imageUrl: string
    extractedText?: string | null
    productName?: string | null
    calories?: number | null
    protein?: number | null
    carbs?: number | null
    fat?: number | null
    servingSize?: string | null
    isVerified?: boolean
    createdAt?: Date | string
  }

  export type FoodEntryUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFoodEntriesNestedInput
  }

  export type FoodEntryUncheckedUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodEntryUncheckedUpdateManyWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    mealType?: StringFieldUpdateOperationsInput | string
    consumedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutScannedProductsNestedInput
  }

  export type ScannedProductUncheckedUpdateWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScannedProductUncheckedUpdateManyWithoutFoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    extractedText?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    protein?: NullableFloatFieldUpdateOperationsInput | number | null
    carbs?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    servingSize?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateManyRecipeInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}