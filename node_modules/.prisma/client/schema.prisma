// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  name             String
  age              Int?
  gender           String?
  currentWeight    Float?
  targetWeight     Float?
  height           Float?
  activityLevel    String? // sedentary, light, moderate, active, very_active
  dailyCalorieGoal Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  foodEntries     FoodEntry[]
  scannedProducts ScannedProduct[]
  favoriteRecipes FavoriteRecipe[]

  @@map("users")
}

model Food {
  id              String   @id @default(cuid())
  name            String
  brand           String?
  barcode         String?  @unique
  caloriesPer100g Int
  proteinPer100g  Float
  carbsPer100g    Float
  fatPer100g      Float
  fiberPer100g    Float?
  sugarPer100g    Float?
  sodiumPer100g   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  foodEntries     FoodEntry[]
  scannedProducts ScannedProduct[]

  @@map("foods")
}

model FoodEntry {
  id         String   @id @default(cuid())
  userId     String
  foodId     String
  quantity   Float // in grams
  mealType   String // breakfast, lunch, dinner, snack
  consumedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id])

  @@map("food_entries")
}

model ScannedProduct {
  id            String   @id @default(cuid())
  userId        String
  foodId        String?
  imageUrl      String
  extractedText String?
  productName   String?
  calories      Int?
  protein       Float?
  carbs         Float?
  fat           Float?
  servingSize   String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food? @relation(fields: [foodId], references: [id])

  @@map("scanned_products")
}

model Recipe {
  id                 String   @id @default(cuid())
  title              String
  description        String?
  instructions       String
  ingredients        String // JSON string of ingredients
  cookingTime        Int? // in minutes
  servings           Int
  caloriesPerServing Int
  proteinPerServing  Float
  carbsPerServing    Float
  fatPerServing      Float
  imageUrl           String?
  sourceUrl          String?
  category           String? // breakfast, lunch, dinner, snack, dessert
  tags               String? // vegetarian,vegan,gluten-free (comma separated)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  favoriteRecipes FavoriteRecipe[]

  @@map("recipes")
}

model FavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("favorite_recipes")
}
