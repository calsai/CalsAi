{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase.ts"],"sourcesContent":["import { createBrowserClient } from \"@supabase/ssr\";\r\n\r\n// Temporar hardcodat pentru testare\r\nconst supabaseUrl = \"https://qbjfxprdlssozwylctrt.supabase.co\";\r\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFiamZ4cHJkbHNzb3p3eWxjdHJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNTU0NzEsImV4cCI6MjA2OTczMTQ3MX0.CwqHvxdcNdfS_wI_eXz7IHG1J_PBRgox8XSamZP8HHg\";\r\n\r\n// Client pentru componentele browser\r\nexport const createSupabaseClient = () => {\r\n  return createBrowserClient(supabaseUrl, supabaseAnonKey);\r\n};\r\n\r\n// Tipuri pentru baza de date\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      profiles: {\r\n        Row: {\r\n          id: string;\r\n          user_id: string;\r\n          full_name: string | null;\r\n          age: number | null;\r\n          weight: number | null;\r\n          height: number | null;\r\n          activity_level:\r\n            | \"sedentary\"\r\n            | \"light\"\r\n            | \"moderate\"\r\n            | \"active\"\r\n            | \"very_active\"\r\n            | null;\r\n          goal: \"lose\" | \"maintain\" | \"gain\" | null;\r\n          daily_calorie_goal: number | null;\r\n          created_at: string;\r\n          updated_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          user_id: string;\r\n          full_name?: string | null;\r\n          age?: number | null;\r\n          weight?: number | null;\r\n          height?: number | null;\r\n          activity_level?:\r\n            | \"sedentary\"\r\n            | \"light\"\r\n            | \"moderate\"\r\n            | \"active\"\r\n            | \"very_active\"\r\n            | null;\r\n          goal?: \"lose\" | \"maintain\" | \"gain\" | null;\r\n          daily_calorie_goal?: number | null;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          user_id?: string;\r\n          full_name?: string | null;\r\n          age?: number | null;\r\n          weight?: number | null;\r\n          height?: number | null;\r\n          activity_level?:\r\n            | \"sedentary\"\r\n            | \"light\"\r\n            | \"moderate\"\r\n            | \"active\"\r\n            | \"very_active\"\r\n            | null;\r\n          goal?: \"lose\" | \"maintain\" | \"gain\" | null;\r\n          daily_calorie_goal?: number | null;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n        };\r\n      };\r\n      food_entries: {\r\n        Row: {\r\n          id: string;\r\n          user_id: string;\r\n          food_name: string;\r\n          calories: number;\r\n          protein: number | null;\r\n          carbs: number | null;\r\n          fat: number | null;\r\n          meal_time: \"dimineata\" | \"amiaza\" | \"seara\";\r\n          date: string;\r\n          confirmed: boolean;\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          user_id: string;\r\n          food_name: string;\r\n          calories: number;\r\n          protein?: number | null;\r\n          carbs?: number | null;\r\n          fat?: number | null;\r\n          meal_time: \"dimineata\" | \"amiaza\" | \"seara\";\r\n          date: string;\r\n          confirmed?: boolean;\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          user_id?: string;\r\n          food_name?: string;\r\n          calories?: number;\r\n          protein?: number | null;\r\n          carbs?: number | null;\r\n          fat?: number | null;\r\n          meal_time?: \"dimineata\" | \"amiaza\" | \"seara\";\r\n          date?: string;\r\n          confirmed?: boolean;\r\n          created_at?: string;\r\n        };\r\n      };\r\n      chat_messages: {\r\n        Row: {\r\n          id: string;\r\n          user_id: string;\r\n          message: string;\r\n          is_user: boolean;\r\n          message_type: \"nutrition\" | \"recipe\" | \"general\";\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          user_id: string;\r\n          message: string;\r\n          is_user: boolean;\r\n          message_type?: \"nutrition\" | \"recipe\" | \"general\";\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          user_id?: string;\r\n          message?: string;\r\n          is_user?: boolean;\r\n          message_type?: \"nutrition\" | \"recipe\" | \"general\";\r\n          created_at?: string;\r\n        };\r\n      };\r\n      recipes: {\r\n        Row: {\r\n          id: string;\r\n          user_id: string;\r\n          name: string;\r\n          ingredients: string[];\r\n          instructions: string;\r\n          calories: number;\r\n          prep_time: number;\r\n          created_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          user_id: string;\r\n          name: string;\r\n          ingredients: string[];\r\n          instructions: string;\r\n          calories: number;\r\n          prep_time: number;\r\n          created_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          user_id?: string;\r\n          name?: string;\r\n          ingredients?: string[];\r\n          instructions?: string;\r\n          calories?: number;\r\n          prep_time?: number;\r\n          created_at?: string;\r\n        };\r\n      };\r\n    };\r\n  };\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,oCAAoC;AACpC,MAAM,cAAc;AACpB,MAAM,kBAAkB;AAGjB,MAAM,uBAAuB;IAClC,OAAO,CAAA,GAAA,6KAAA,CAAA,sBAAmB,AAAD,EAAE,aAAa;AAC1C","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { User } from \"@supabase/auth-helpers-nextjs\";\r\nimport { createSupabaseClient } from \"@/lib/supabase\";\r\n\r\ntype AuthContextType = {\r\n  user: User | null;\r\n  loading: boolean;\r\n  signIn: (email: string, password: string) => Promise<{ error?: string }>;\r\n  signUp: (\r\n    email: string,\r\n    password: string,\r\n    fullName: string\r\n  ) => Promise<{ error?: string }>;\r\n  signOut: () => Promise<void>;\r\n};\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  console.log(\"AuthProvider component rendered - BEFORE EVERYTHING\");\r\n\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Create supabase client instance\r\n  const supabase = createSupabaseClient();\r\n\r\n  console.log(\"AuthProvider - after useState, loading:\", loading);\r\n\r\n  // Get initial session and set up auth listener\r\n  useEffect(() => {\r\n    console.log(\"USEEFFECT IS RUNNING!!!\");\r\n\r\n    // Get initial session\r\n    const getInitialSession = async () => {\r\n      try {\r\n        const {\r\n          data: { session },\r\n        } = await supabase.auth.getSession();\r\n        console.log(\"Initial session:\", session);\r\n        setUser(session?.user ?? null);\r\n      } catch (error) {\r\n        console.error(\"Error getting initial session:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getInitialSession();\r\n\r\n    // Set up auth state listener\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n      console.log(\"Auth state changed:\", event, session?.user?.email);\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Cleanup subscription\r\n    return () => subscription.unsubscribe();\r\n  }, [supabase.auth]);\r\n\r\n  console.log(\"AuthProvider - after useEffect definition\");\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      const { error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n      if (error) {\r\n        console.error(\"Sign in error:\", error);\r\n\r\n        if (error.message.includes(\"email_not_confirmed\")) {\r\n          return {\r\n            error:\r\n              \"Te rugăm să confirmi email-ul înainte de a te loga. Verifică inbox-ul pentru linkul de confirmare.\",\r\n          };\r\n        }\r\n\r\n        if (error.message.includes(\"invalid_credentials\")) {\r\n          return {\r\n            error:\r\n              \"Email sau parolă incorectă. Verifică datele și încearcă din nou.\",\r\n          };\r\n        }\r\n\r\n        return { error: error.message };\r\n      }\r\n      return {};\r\n    } catch (error) {\r\n      console.error(\"Sign in error:\", error);\r\n      return { error: \"A apărut o eroare la conectare\" };\r\n    }\r\n  };\r\n\r\n  const signUp = async (email: string, password: string, fullName: string) => {\r\n    try {\r\n      console.log(\"Starting signup process for:\", email);\r\n\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        options: {\r\n          data: {\r\n            full_name: fullName,\r\n          },\r\n        },\r\n      });\r\n\r\n      if (error) {\r\n        console.error(\"Supabase auth signup error:\", error);\r\n\r\n        if (error.message.includes(\"email_address_invalid\")) {\r\n          return {\r\n            error:\r\n              \"Te rugăm să folosești o adresă de email validă (ex: nume@gmail.com)\",\r\n          };\r\n        }\r\n\r\n        return { error: error.message };\r\n      }\r\n\r\n      console.log(\"Auth signup successful:\", data);\r\n\r\n      // Nu mai creez profilul aici - se va crea automat când utilizatorul se loghează\r\n      // Acest lucru evită problemele cu RLS și email confirmation\r\n\r\n      if (data.user && !data.user.email_confirmed_at) {\r\n        console.log(\"User created but needs email confirmation\");\r\n        return {\r\n          error: `Un email de confirmare a fost trimis la ${email}. Te rugăm să deschizi linkul din email pentru a-ți activa contul.`,\r\n        };\r\n      }\r\n\r\n      console.log(\"Signup completed successfully\");\r\n      return {};\r\n    } catch (error) {\r\n      console.error(\"Sign up error:\", error);\r\n      return { error: \"A apărut o eroare la înregistrare\" };\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}