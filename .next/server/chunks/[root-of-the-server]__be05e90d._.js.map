{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\n\r\n// Calcularea caloriilor zilnice recomandate\r\nfunction calculateDailyCalories(\r\n  weight: number,\r\n  height: number,\r\n  age: number,\r\n  activityLevel: string,\r\n  goal: string\r\n): number {\r\n  // Formula Harris-Benedict pentru metabolismul bazal\r\n  // Pentru simplificare, calculez pentru bărbați (pentru femei se scade ~200-300 cal)\r\n  const bmr = 88.362 + 13.397 * weight + 4.799 * height - 5.677 * age;\r\n\r\n  // Factorul de activitate\r\n  const activityFactors = {\r\n    sedentary: 1.2,\r\n    light: 1.375,\r\n    moderate: 1.55,\r\n    active: 1.725,\r\n    very_active: 1.9,\r\n  };\r\n\r\n  const activity =\r\n    activityFactors[activityLevel as keyof typeof activityFactors] || 1.2;\r\n  const maintenanceCalories = bmr * activity;\r\n\r\n  // Ajustarea pentru obiectiv\r\n  switch (goal) {\r\n    case \"lose\":\r\n      return Math.round(maintenanceCalories - 500); // Deficit de 500 cal\r\n    case \"gain\":\r\n      return Math.round(maintenanceCalories + 300); // Surplus de 300 cal\r\n    default:\r\n      return Math.round(maintenanceCalories);\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const supabase = await createSupabaseServerClient();\r\n\r\n    // Verifică autentificarea\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n\r\n    // Obține profilul utilizatorului\r\n    const { data: profile, error } = await supabase\r\n      .from(\"profiles\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") {\r\n      // PGRST116 = no rows returned\r\n      return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      profile: profile || null,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        full_name: user.user_metadata?.full_name,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching profile:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"Technical error\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const supabase = await createSupabaseServerClient();\r\n\r\n    // Verifică autentificarea\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n\r\n    const { full_name, age, weight, height, activity_level, goal } =\r\n      await request.json();\r\n\r\n    // Calculează caloriile zilnice dacă avem datele necesare\r\n    let daily_calorie_goal = null;\r\n    if (weight && height && age && activity_level && goal) {\r\n      daily_calorie_goal = calculateDailyCalories(\r\n        weight,\r\n        height,\r\n        age,\r\n        activity_level,\r\n        goal\r\n      );\r\n    }\r\n\r\n    // Încearcă să actualizeze profilul existent\r\n    const { data: existingProfile } = await supabase\r\n      .from(\"profiles\")\r\n      .select(\"id\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    let result;\r\n\r\n    if (existingProfile) {\r\n      // Actualizează profilul existent\r\n      result = await supabase\r\n        .from(\"profiles\")\r\n        .update({\r\n          full_name,\r\n          age,\r\n          weight,\r\n          height,\r\n          activity_level,\r\n          goal,\r\n          daily_calorie_goal,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq(\"user_id\", user.id)\r\n        .select()\r\n        .single();\r\n    } else {\r\n      // Creează un profil nou\r\n      result = await supabase\r\n        .from(\"profiles\")\r\n        .insert([\r\n          {\r\n            user_id: user.id,\r\n            full_name,\r\n            age,\r\n            weight,\r\n            height,\r\n            activity_level,\r\n            goal,\r\n            daily_calorie_goal,\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n    }\r\n\r\n    if (result.error) {\r\n      return NextResponse.json(\r\n        { error: result.error.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      profile: result.data,\r\n      message: \"Profil salvat cu succes!\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error saving profile:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"Technical error\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}