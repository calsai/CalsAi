{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\n\r\n// Import funcțiile de detectare din natural-chat\r\nfunction detectFoodsInMessage(message: string) {\r\n  const foods = [];\r\n  const messageClean = message.toLowerCase();\r\n\r\n  // Pattern-uri mai naturale pentru alimente românești\r\n  const foodPatterns = [\r\n    // Pâine și cereale\r\n    {\r\n      pattern: /(\\d+)\\s*(felii?|felie)\\s*(de\\s+)?pâine/gi,\r\n      food: \"pâine\",\r\n      unit: \"felie\",\r\n      calsPerUnit: 80,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?pâine/gi,\r\n      food: \"pâine\",\r\n      unit: \"g\",\r\n      calsPerGram: 2.5,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(orez|rice)/gi,\r\n      food: \"orez fiert\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.3,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(paste|spaghete|macaroane)/gi,\r\n      food: \"paste\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.1,\r\n    },\r\n\r\n    // Proteine\r\n    {\r\n      pattern: /(\\d+)\\s*(ouă?|ou)/gi,\r\n      food: \"ouă\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 70,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(pui|piept\\s*de\\s*pui)/gi,\r\n      food: \"piept de pui\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.65,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(peşte|peste|somon|ton)/gi,\r\n      food: \"pește\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.2,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(carne|vita|porc)/gi,\r\n      food: \"carne\",\r\n      unit: \"g\",\r\n      calsPerGram: 2.5,\r\n    },\r\n\r\n    // Lactate\r\n    {\r\n      pattern: /(\\d+)\\s*ml?\\s*(de\\s+)?lapte/gi,\r\n      food: \"lapte\",\r\n      unit: \"ml\",\r\n      calsPerMl: 0.64,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(brânză|caş|telemea)/gi,\r\n      food: \"brânză\",\r\n      unit: \"g\",\r\n      calsPerGram: 2.8,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?iaurt/gi,\r\n      food: \"iaurt\",\r\n      unit: \"g\",\r\n      calsPerGram: 0.6,\r\n    },\r\n\r\n    // Fructe și legume\r\n    {\r\n      pattern: /(\\d+)\\s*(mere?|măr)/gi,\r\n      food: \"măr\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 80,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*banane?/gi,\r\n      food: \"banană\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 90,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*portocale?/gi,\r\n      food: \"portocală\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 60,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(roşii|tomate)/gi,\r\n      food: \"roșii\",\r\n      unit: \"g\",\r\n      calsPerGram: 0.18,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(salată|verdeţuri)/gi,\r\n      food: \"salată verde\",\r\n      unit: \"g\",\r\n      calsPerGram: 0.15,\r\n    },\r\n\r\n    // Snacksuri și dulciuri\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(ciocolată|chocolate)/gi,\r\n      food: \"ciocolată\",\r\n      unit: \"g\",\r\n      calsPerGram: 5.5,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(biscuiţi|fursecuri)/gi,\r\n      food: \"biscuiți\",\r\n      unit: \"g\",\r\n      calsPerGram: 4.5,\r\n    },\r\n  ];\r\n\r\n  for (const {\r\n    pattern,\r\n    food,\r\n    unit,\r\n    calsPerUnit,\r\n    calsPerGram,\r\n    calsPerMl,\r\n  } of foodPatterns) {\r\n    const matches = Array.from(message.matchAll(pattern));\r\n\r\n    for (const match of matches) {\r\n      const quantity = parseInt(match[1]);\r\n      if (isNaN(quantity) || quantity <= 0) continue;\r\n\r\n      let totalCalories = 0;\r\n      let displayText = \"\";\r\n\r\n      if (calsPerUnit) {\r\n        totalCalories = quantity * calsPerUnit;\r\n        displayText = `${quantity} ${unit}${\r\n          quantity > 1 ? (unit === \"bucată\" ? \" bucăți\" : \"i\") : \"\"\r\n        } ${food}`;\r\n      } else if (calsPerGram) {\r\n        totalCalories = quantity * calsPerGram;\r\n        displayText = `${quantity}g ${food}`;\r\n      } else if (calsPerMl) {\r\n        totalCalories = quantity * calsPerMl;\r\n        displayText = `${quantity}ml ${food}`;\r\n      }\r\n\r\n      foods.push({\r\n        name: displayText,\r\n        calories: Math.round(totalCalories),\r\n        baseFood: food,\r\n        quantity,\r\n        unit,\r\n      });\r\n    }\r\n  }\r\n\r\n  return foods;\r\n}\r\n\r\nfunction estimateMacros(foodName: string, calories: number) {\r\n  const foodType = foodName.toLowerCase();\r\n\r\n  // Estimări bazate pe tipul de aliment\r\n  if (\r\n    foodType.includes(\"pui\") ||\r\n    foodType.includes(\"peşte\") ||\r\n    foodType.includes(\"ou\")\r\n  ) {\r\n    // Proteine\r\n    return {\r\n      protein: Math.round((calories * 0.6) / 4), // 60% proteine\r\n      carbs: Math.round((calories * 0.1) / 4), // 10% carbohidrați\r\n      fat: Math.round((calories * 0.3) / 9), // 30% grăsimi\r\n    };\r\n  } else if (\r\n    foodType.includes(\"pâine\") ||\r\n    foodType.includes(\"orez\") ||\r\n    foodType.includes(\"paste\")\r\n  ) {\r\n    // Carbohidrați\r\n    return {\r\n      protein: Math.round((calories * 0.15) / 4), // 15% proteine\r\n      carbs: Math.round((calories * 0.7) / 4), // 70% carbohidrați\r\n      fat: Math.round((calories * 0.15) / 9), // 15% grăsimi\r\n    };\r\n  } else if (\r\n    foodType.includes(\"brânză\") ||\r\n    foodType.includes(\"lapte\") ||\r\n    foodType.includes(\"iaurt\")\r\n  ) {\r\n    // Lactate\r\n    return {\r\n      protein: Math.round((calories * 0.35) / 4), // 35% proteine\r\n      carbs: Math.round((calories * 0.35) / 4), // 35% carbohidrați\r\n      fat: Math.round((calories * 0.3) / 9), // 30% grăsimi\r\n    };\r\n  } else {\r\n    // General/fructe/legume\r\n    return {\r\n      protein: Math.round((calories * 0.1) / 4), // 10% proteine\r\n      carbs: Math.round((calories * 0.8) / 4), // 80% carbohidrați\r\n      fat: Math.round((calories * 0.1) / 9), // 10% grăsimi\r\n    };\r\n  }\r\n}\r\n\r\nfunction getCurrentMealTime(): \"dimineata\" | \"amiaza\" | \"seara\" {\r\n  const hour = new Date().getHours();\r\n\r\n  if (hour >= 6 && hour < 12) {\r\n    return \"dimineata\";\r\n  } else if (hour >= 12 && hour < 18) {\r\n    return \"amiaza\";\r\n  } else {\r\n    return \"seara\";\r\n  }\r\n}\r\n\r\n// Funcție pentru apelul către Perplexity API cu fetch direct\r\nasync function callPerplexityAPI(message: string) {\r\n  console.log(\"PERPLEXITY_API_KEY:\", process.env.PERPLEXITY_API_KEY ? \"SET\" : \"NOT SET\");\r\n  console.log(\"Token length:\", process.env.PERPLEXITY_API_KEY?.length || 0);\r\n\r\n  if (!process.env.PERPLEXITY_API_KEY) {\r\n    return \"Îmi pare rău, nu am acces la serviciul AI momentan. Te rog să verifici configurația.\";\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      \"https://api.perplexity.ai/chat/completions\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"sonar\",\r\n          messages: [\r\n            {\r\n              role: \"system\",\r\n              content:\r\n                \"Ești un coach personal de nutriție profesional și expert în română. Vorbești profesional și prietenos, ești motivant dar echilibrat, dai sfaturi practice și bazate pe știință, ești empatic și înțelegător.\",\r\n            },\r\n            {\r\n              role: \"user\",\r\n              content: message,\r\n            },\r\n          ],\r\n          temperature: 0.7,\r\n          max_tokens: 300,\r\n        }),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Perplexity API error:\", response.status, response.statusText);\r\n      const errorText = await response.text();\r\n      console.error(\"Error details:\", errorText);\r\n      return \"Îmi pare rău, am o problemă tehnică. Te rog încearcă din nou! 😔\";\r\n    }\r\n\r\n    const data = await response.json();\r\n    return (\r\n      data.choices[0]?.message?.content || \"Nu am putut genera un răspuns.\"\r\n    );\r\n  } catch (error) {\r\n    console.error(\"GitHub AI API error:\", error);\r\n    return \"Îmi pare rău, am o problemă tehnică. Te rog încearcă din nou! 😔\";\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { message } = await request.json();\r\n\r\n    if (!message?.trim()) {\r\n      return NextResponse.json(\r\n        { error: \"Message is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Apelează Perplexity AI\r\n    const aiResponse = await callPerplexityAPI(message);\r\n\r\n    return NextResponse.json({\r\n      response: aiResponse,\r\n      success: true,\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"Error in chat:\", error);\r\n\r\n    // Fallback răspuns dacă AI nu funcționează\r\n    const fallbackResponses = [\r\n      \"Îmi pare rău, am o problemă tehnică momentan. Pot să te ajut cu ceva simplu despre nutriție? 🍎\",\r\n      \"Nu reușesc să mă conectez la serviciul AI acum. Ce întrebare ai despre alimentația sănătoasă? 🥗\",\r\n      \"Am o mică problemă tehnică. Spune-mi ce vrei să știi despre dietă și îți răspund! 💪\",\r\n    ];\r\n\r\n    return NextResponse.json({\r\n      response:\r\n        fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)],\r\n      success: false,\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAGA,iDAAiD;AACjD,SAAS,qBAAqB,OAAe;IAC3C,MAAM,QAAQ,EAAE;IAChB,MAAM,eAAe,QAAQ,WAAW;IAExC,qDAAqD;IACrD,MAAM,eAAe;QACnB,mBAAmB;QACnB;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,WAAW;QACX;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,UAAU;QACV;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,WAAW;QACb;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,mBAAmB;QACnB;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,wBAAwB;QACxB;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;KACD;IAED,KAAK,MAAM,EACT,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,WAAW,EACX,WAAW,EACX,SAAS,EACV,IAAI,aAAc;QACjB,MAAM,UAAU,MAAM,IAAI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","debugId":null}}]
}