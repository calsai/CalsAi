{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/estimate-nutrition/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { foodDescription } = await request.json();\r\n    const supabase = await createSupabaseServerClient();\r\n\r\n    // Verifică autentificarea\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n\r\n    if (!foodDescription?.trim()) {\r\n      return NextResponse.json(\r\n        { error: \"Food description is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Analizează cu Perplexity AI\r\n    const nutrition = await analyzeNutritionWithAI(foodDescription);\r\n\r\n    if (!nutrition) {\r\n      // Fallback la estimarea simplă\r\n      const estimated = estimateNutritionSimple(foodDescription);\r\n      return NextResponse.json({\r\n        success: true,\r\n        nutrition: estimated,\r\n        source: \"estimated\",\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      nutrition,\r\n      source: \"ai\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in nutrition estimation:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Technical error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nasync function analyzeNutritionWithAI(foodDescription: string) {\r\n  if (!process.env.PERPLEXITY_API_KEY) {\r\n    return null;\r\n  }\r\n\r\n  const nutritionPrompt = `\r\nAnalizează următoarea descriere de aliment și calculează valorile nutriționale exacte:\r\n\r\n\"${foodDescription}\"\r\n\r\nRăspunde DOAR cu un JSON valid în acest format:\r\n{\r\n  \"calories\": număr_calorii_total,\r\n  \"protein\": grame_proteine_total,\r\n  \"carbs\": grame_carbohidrați_total,\r\n  \"fat\": grame_grăsimi_total\r\n}\r\n\r\nIa în considerare cantitățile specificate (g, kg, felii, bucăți, etc.) și calculează totalul pentru toată porția menționată.\r\nFolosește date nutriționale reale și precise.\r\n`;\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.perplexity.ai/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"sonar\",\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content:\r\n              \"Ești un expert nutriționist care calculează valorile nutriționale precise. Răspunzi DOAR cu JSON valid.\",\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: nutritionPrompt,\r\n          },\r\n        ],\r\n        temperature: 0.2,\r\n        max_tokens: 200,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Perplexity nutrition estimation error:\", response.status);\r\n      return null;\r\n    }\r\n\r\n    const data = await response.json();\r\n    const aiResponse = data.choices[0]?.message?.content;\r\n\r\n    if (!aiResponse) return null;\r\n\r\n    try {\r\n      const nutritionData = JSON.parse(aiResponse.trim());\r\n      return {\r\n        calories: nutritionData.calories || 0,\r\n        protein: nutritionData.protein || 0,\r\n        carbs: nutritionData.carbs || 0,\r\n        fat: nutritionData.fat || 0,\r\n      };\r\n    } catch (parseError) {\r\n      console.error(\"Failed to parse AI nutrition response:\", parseError);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"AI nutrition estimation error:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction estimateNutritionSimple(foodDescription: string) {\r\n  const desc = foodDescription.toLowerCase();\r\n  let calories = 100;\r\n  let protein = 5;\r\n  let carbs = 15;\r\n  let fat = 3;\r\n\r\n  // Extrage cantitățile\r\n  const quantityMatch = desc.match(\r\n    /(\\d+(?:\\.\\d+)?)\\s*(g|kg|felii?|bucăți?|bucata|ml|l)/i\r\n  );\r\n  let multiplier = 1;\r\n\r\n  if (quantityMatch) {\r\n    const quantity = parseFloat(quantityMatch[1]);\r\n    const unit = quantityMatch[2].toLowerCase();\r\n\r\n    if (unit.includes(\"kg\")) {\r\n      multiplier = quantity * 10; // 1kg = ~10 porții de 100g\r\n    } else if (unit.includes(\"g\")) {\r\n      multiplier = quantity / 100; // standardizat la 100g\r\n    } else if (unit.includes(\"felii\") || unit.includes(\"felie\")) {\r\n      multiplier = quantity * 0.8; // o felie ≈ 80g\r\n    } else if (unit.includes(\"bucăți\") || unit.includes(\"bucata\")) {\r\n      multiplier = quantity;\r\n    } else if (unit.includes(\"ml\")) {\r\n      multiplier = quantity / 100; // 100ml standard pentru lichide\r\n    } else if (unit.includes(\"l\")) {\r\n      multiplier = quantity * 10; // 1L = 10 x 100ml\r\n    }\r\n  }\r\n\r\n  // Pattern matching pentru tipuri de alimente\r\n  if (desc.includes(\"ou\")) {\r\n    calories = 70;\r\n    protein = 6;\r\n    carbs = 1;\r\n    fat = 5;\r\n  } else if (desc.includes(\"pui\") || desc.includes(\"piept\")) {\r\n    calories = 165;\r\n    protein = 31;\r\n    carbs = 0;\r\n    fat = 3.6;\r\n  } else if (desc.includes(\"pâine\") || desc.includes(\"felie\")) {\r\n    calories = 250;\r\n    protein = 9;\r\n    carbs = 49;\r\n    fat = 3.2;\r\n  } else if (desc.includes(\"lapte\")) {\r\n    calories = 64;\r\n    protein = 3.2;\r\n    carbs = 4.8;\r\n    fat = 3.6;\r\n  } else if (desc.includes(\"brânză\") || desc.includes(\"caș\")) {\r\n    calories = 280;\r\n    protein = 25;\r\n    carbs = 2;\r\n    fat = 20;\r\n  } else if (desc.includes(\"măr\") || desc.includes(\"mere\")) {\r\n    calories = 52;\r\n    protein = 0.3;\r\n    carbs = 14;\r\n    fat = 0.2;\r\n  } else if (desc.includes(\"banană\")) {\r\n    calories = 89;\r\n    protein = 1.1;\r\n    carbs = 23;\r\n    fat = 0.3;\r\n  } else if (desc.includes(\"orez\")) {\r\n    calories = 130;\r\n    protein = 2.7;\r\n    carbs = 28;\r\n    fat = 0.3;\r\n  } else if (desc.includes(\"paste\") || desc.includes(\"spaghete\")) {\r\n    calories = 131;\r\n    protein = 5;\r\n    carbs = 25;\r\n    fat = 1.1;\r\n  }\r\n\r\n  return {\r\n    calories: Math.round(calories * multiplier),\r\n    protein: Math.round(protein * multiplier * 10) / 10,\r\n    carbs: Math.round(carbs * multiplier * 10) / 10,\r\n    fat: Math.round(fat * multiplier * 10) / 10,\r\n  };\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}