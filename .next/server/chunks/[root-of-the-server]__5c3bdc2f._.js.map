{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/natural-chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\nimport OpenAI from \"openai\";\r\n\r\n// Inițializează OpenAI client pentru GitHub Models\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.GITHUB_TOKEN,\r\n  baseURL: \"https://models.github.ai/inference\",\r\n  dangerouslyAllowBrowser: true,\r\n});\r\n\r\n// Funcție pentru detectarea alimentelor în mesaj\r\nfunction detectFoodsInMessage(message: string) {\r\n  const foods = [];\r\n  const messageClean = message.toLowerCase();\r\n\r\n  // Pattern-uri mai naturale pentru alimente românești\r\n  const foodPatterns = [\r\n    // Pâine și cereale\r\n    {\r\n      pattern: /(\\d+)\\s*(felii?|felie)\\s*(de\\s+)?pâine/gi,\r\n      food: \"pâine\",\r\n      unit: \"felie\",\r\n      calsPerUnit: 80,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?pâine/gi,\r\n      food: \"pâine\",\r\n      unit: \"g\",\r\n      calsPerGram: 2.5,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(orez|rice)/gi,\r\n      food: \"orez fiert\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.3,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(paste|spaghete|macaroane)/gi,\r\n      food: \"paste\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.1,\r\n    },\r\n\r\n    // Proteine\r\n    {\r\n      pattern: /(\\d+)\\s*(ouă?|ou)/gi,\r\n      food: \"ouă\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 70,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(pui|piept\\s*de\\s*pui)/gi,\r\n      food: \"piept de pui\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.65,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(peşte|peste|somon|ton)/gi,\r\n      food: \"pește\",\r\n      unit: \"g\",\r\n      calsPerGram: 1.2,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(carne|vita|porc)/gi,\r\n      food: \"carne\",\r\n      unit: \"g\",\r\n      calsPerGram: 2.5,\r\n    },\r\n\r\n    // Lactate\r\n    {\r\n      pattern: /(\\d+)\\s*ml?\\s*(de\\s+)?lapte/gi,\r\n      food: \"lapte\",\r\n      unit: \"ml\",\r\n      calsPerMl: 0.64,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(brânză|caş|telemea)/gi,\r\n      food: \"brânză\",\r\n      unit: \"g\",\r\n      calsPerGram: 2.8,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?iaurt/gi,\r\n      food: \"iaurt\",\r\n      unit: \"g\",\r\n      calsPerGram: 0.6,\r\n    },\r\n\r\n    // Fructe și legume\r\n    {\r\n      pattern: /(\\d+)\\s*(mere?|măr)/gi,\r\n      food: \"măr\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 80,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*banane?/gi,\r\n      food: \"banană\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 90,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*portocale?/gi,\r\n      food: \"portocală\",\r\n      unit: \"bucată\",\r\n      calsPerUnit: 60,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(roşii|tomate)/gi,\r\n      food: \"roșii\",\r\n      unit: \"g\",\r\n      calsPerGram: 0.18,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(salată|verdeţuri)/gi,\r\n      food: \"salată verde\",\r\n      unit: \"g\",\r\n      calsPerGram: 0.15,\r\n    },\r\n\r\n    // Snacksuri și dulciuri\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(ciocolată|chocolate)/gi,\r\n      food: \"ciocolată\",\r\n      unit: \"g\",\r\n      calsPerGram: 5.5,\r\n    },\r\n    {\r\n      pattern: /(\\d+)\\s*g?\\s*(de\\s+)?(biscuiţi|fursecuri)/gi,\r\n      food: \"biscuiți\",\r\n      unit: \"g\",\r\n      calsPerGram: 4.5,\r\n    },\r\n  ];\r\n\r\n  for (const {\r\n    pattern,\r\n    food,\r\n    unit,\r\n    calsPerUnit,\r\n    calsPerGram,\r\n    calsPerMl,\r\n  } of foodPatterns) {\r\n    const matches = Array.from(message.matchAll(pattern));\r\n\r\n    for (const match of matches) {\r\n      const quantity = parseInt(match[1]);\r\n      if (isNaN(quantity) || quantity <= 0) continue;\r\n\r\n      let totalCalories = 0;\r\n      let displayText = \"\";\r\n\r\n      if (calsPerUnit) {\r\n        totalCalories = quantity * calsPerUnit;\r\n        displayText = `${quantity} ${unit}${\r\n          quantity > 1 ? (unit === \"bucată\" ? \" bucăți\" : \"i\") : \"\"\r\n        } ${food}`;\r\n      } else if (calsPerGram) {\r\n        totalCalories = quantity * calsPerGram;\r\n        displayText = `${quantity}g ${food}`;\r\n      } else if (calsPerMl) {\r\n        totalCalories = quantity * calsPerMl;\r\n        displayText = `${quantity}ml ${food}`;\r\n      }\r\n\r\n      foods.push({\r\n        name: displayText,\r\n        calories: Math.round(totalCalories),\r\n        baseFood: food,\r\n        quantity,\r\n        unit,\r\n      });\r\n    }\r\n  }\r\n\r\n  return foods;\r\n}\r\n\r\n// AI prompt mult mai natural și uman\r\nasync function callGitHubAIForNaturalChat(\r\n  message: string,\r\n  detectedFoods: any[],\r\n  userProfile: any\r\n) {\r\n  if (!process.env.GITHUB_TOKEN) {\r\n    return \"Îmi pare rău, nu am acces la serviciul AI momentan.\";\r\n  }\r\n  const naturalPrompt = `\r\nTu ești Alex, un nutriționist prietenos și empatic care vorbește cu ${\r\n    userProfile?.full_name || \"prietenul tău\"\r\n  }. \r\n\r\nMESAJUL LUI: \"${message}\"\r\n\r\n${\r\n  detectedFoods.length > 0\r\n    ? `\r\nAm detectat aceste alimente în mesajul lui:\r\n${detectedFoods.map((f) => `- ${f.name} (~${f.calories} calorii)`).join(\"\\n\")}\r\n`\r\n    : \"\"\r\n}\r\n\r\n${\r\n  userProfile\r\n    ? `\r\nPROFILUL LUI:\r\n- Vârstă: ${userProfile.age || \"nespecificată\"} ani\r\n- Greutate: ${userProfile.weight || \"nespecificată\"} kg  \r\n- Înălțime: ${userProfile.height || \"nespecificată\"} cm\r\n- Obiectiv: ${\r\n        userProfile.goal === \"lose\"\r\n          ? \"să slăbească\"\r\n          : userProfile.goal === \"gain\"\r\n          ? \"să se îngrașe\"\r\n          : \"să se maintină\"\r\n      }\r\n- Calorii zilnice recomandate: ${\r\n        userProfile.daily_calorie_goal || \"necalculate\"\r\n      } cal\r\n`\r\n    : \"\"\r\n}\r\n\r\nPERSONALITATEA TA:\r\n- Vorbești natural, ca și cum ați fi prieteni\r\n- Ești empatic și înțelegător cu starea lui de spirit\r\n- Dai sfaturi practice, nu lecții\r\n- Folosești expresii românești naturale\r\n- Nu suni robotic sau formal\r\n- Îl motivezi pozitiv, fără să fii judecător\r\n- Adresezi și starea emoțională legată de mâncare\r\n\r\nSARCINA TA:\r\n1. Răspunde empatic la cum se simte\r\n2. Confirmă alimentele detectate NATURAL (nu ca o listă robotică)\r\n3. Dă sfaturi nutriționale practice\r\n4. Întreabă cum se simte alimentar/emoțional\r\n5. Sugerează îmbunătățiri blânde\r\n\r\nSTIL DE RĂSPUNS:\r\n- Răspunde ca un prieten apropiat\r\n- Maxim 80-100 cuvinte\r\n- Fără formatări artificiale sau bullet points\r\n- Natural și conversațional\r\n\r\nEXEMPLE DE TON:\r\n\"Văd că ai mâncat... Cum te simți după? Îți recomand să...\" \r\n\"Mă bucur că ai ales... Te-a săturat? Poate data viitoare...\"\r\n\"Înțeleg că îți e greu cu... Hai să găsim împreună o soluție...\"\r\n`;\r\n\r\n  try {\r\n    const response = await openai.chat.completions.create({\r\n      model: \"openai/gpt-4o-mini\",\r\n      messages: [\r\n        {\r\n          role: \"system\",\r\n          content:\r\n            \"Ești Alex, un nutriționist prietenos și empatic care vorbește natural cu utilizatorii.\",\r\n        },\r\n        {\r\n          role: \"user\",\r\n          content: naturalPrompt,\r\n        },\r\n      ],\r\n      temperature: 0.8,\r\n      max_tokens: 150,\r\n    });\r\n\r\n    return (\r\n      response.choices[0]?.message?.content ||\r\n      \"Îmi pare rău, nu am putut răspunde acum. Cum te simți?\"\r\n    );\r\n  } catch (error) {\r\n    console.error(\"GitHub AI API error:\", error);\r\n\r\n    if (detectedFoods.length > 0) {\r\n      return `Văd că ai mâncat ${detectedFoods\r\n        .map((f) => f.name)\r\n        .join(\", \")}. Cum te simți după masă? Ai vrea să vorbim despre asta?`;\r\n    }\r\n\r\n    return \"Îmi pare rău, am o problemă tehnică. Dar spune-mi, cum te simți astăzi din punct de vedere alimentar?\";\r\n  }\r\n}\r\n\r\n// Calcularea automată a macronutrienților\r\nfunction estimateMacros(foodName: string, calories: number) {\r\n  const foodType = foodName.toLowerCase();\r\n\r\n  // Estimări bazate pe tipul de aliment\r\n  if (\r\n    foodType.includes(\"pui\") ||\r\n    foodType.includes(\"peşte\") ||\r\n    foodType.includes(\"ou\")\r\n  ) {\r\n    // Proteine\r\n    return {\r\n      protein: Math.round((calories * 0.6) / 4), // 60% proteine\r\n      carbs: Math.round((calories * 0.1) / 4), // 10% carbohidrați\r\n      fat: Math.round((calories * 0.3) / 9), // 30% grăsimi\r\n    };\r\n  } else if (\r\n    foodType.includes(\"pâine\") ||\r\n    foodType.includes(\"orez\") ||\r\n    foodType.includes(\"paste\")\r\n  ) {\r\n    // Carbohidrați\r\n    return {\r\n      protein: Math.round((calories * 0.15) / 4), // 15% proteine\r\n      carbs: Math.round((calories * 0.7) / 4), // 70% carbohidrați\r\n      fat: Math.round((calories * 0.15) / 9), // 15% grăsimi\r\n    };\r\n  } else if (\r\n    foodType.includes(\"brânză\") ||\r\n    foodType.includes(\"lapte\") ||\r\n    foodType.includes(\"iaurt\")\r\n  ) {\r\n    // Lactate\r\n    return {\r\n      protein: Math.round((calories * 0.35) / 4), // 35% proteine\r\n      carbs: Math.round((calories * 0.35) / 4), // 35% carbohidrați\r\n      fat: Math.round((calories * 0.3) / 9), // 30% grăsimi\r\n    };\r\n  } else {\r\n    // General/fructe/legume\r\n    return {\r\n      protein: Math.round((calories * 0.1) / 4), // 10% proteine\r\n      carbs: Math.round((calories * 0.8) / 4), // 80% carbohidrați\r\n      fat: Math.round((calories * 0.1) / 9), // 10% grăsimi\r\n    };\r\n  }\r\n}\r\n\r\nfunction getCurrentMealTime(): \"dimineata\" | \"amiaza\" | \"seara\" {\r\n  const hour = new Date().getHours();\r\n\r\n  if (hour >= 6 && hour < 12) {\r\n    return \"dimineata\";\r\n  } else if (hour >= 12 && hour < 18) {\r\n    return \"amiaza\";\r\n  } else {\r\n    return \"seara\";\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { message } = await request.json();\r\n    const supabase = await createSupabaseServerClient();\r\n\r\n    // Verifică autentificarea\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n\r\n    // Obține profilul utilizatorului\r\n    const { data: profile } = await supabase\r\n      .from(\"profiles\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    // Detectează alimentele\r\n    const detectedFoods = detectFoodsInMessage(message);\r\n\r\n    // Salvează mesajul utilizatorului\r\n    await supabase.from(\"chat_messages\").insert([\r\n      {\r\n        user_id: user.id,\r\n        message: message,\r\n        is_user: true,\r\n        message_type: detectedFoods.length > 0 ? \"nutrition\" : \"general\",\r\n      },\r\n    ]);\r\n\r\n    // Pregătește intrările pentru jurnal\r\n    const pendingEntries = detectedFoods.map((food) => {\r\n      const macros = estimateMacros(food.baseFood, food.calories);\r\n      return {\r\n        food_name: food.name,\r\n        calories: food.calories,\r\n        protein: macros.protein,\r\n        carbs: macros.carbs,\r\n        fat: macros.fat,\r\n        meal_time: getCurrentMealTime(),\r\n        date: new Date().toISOString().split(\"T\")[0],\r\n        confirmed: false, // Așteaptă confirmarea utilizatorului\r\n      };\r\n    });\r\n\r\n    // Obține răspunsul natural de la GitHub AI\r\n    const aiResponse = await callGitHubAIForNaturalChat(\r\n      message,\r\n      detectedFoods,\r\n      profile\r\n    );\r\n\r\n    // Salvează răspunsul AI\r\n    await supabase.from(\"chat_messages\").insert([\r\n      {\r\n        user_id: user.id,\r\n        message: aiResponse,\r\n        is_user: false,\r\n        message_type: \"nutrition\",\r\n      },\r\n    ]);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      response: aiResponse,\r\n      pendingEntries: pendingEntries,\r\n      needsConfirmation: pendingEntries.length > 0,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in natural chat:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"Technical error\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,mDAAmD;AACnD,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,YAAY;IAChC,SAAS;IACT,yBAAyB;AAC3B;AAEA,iDAAiD;AACjD,SAAS,qBAAqB,OAAe;IAC3C,MAAM,QAAQ,EAAE;IAChB,MAAM,eAAe,QAAQ,WAAW;IAExC,qDAAqD;IACrD,MAAM,eAAe;QACnB,mBAAmB;QACnB;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,WAAW;QACX;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,UAAU;QACV;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,WAAW;QACb;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,mBAAmB;QACnB;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QAEA,wBAAwB;QACxB;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa;QACf;QACA;YACE,SAAS;YACT,MAAM;YACN,MAAM;YACN,aAAa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","debugId":null}}]
}