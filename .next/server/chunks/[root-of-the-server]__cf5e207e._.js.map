{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/food-analytics/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { cookies } from \"next/headers\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\r\n\r\ninterface FoodEntry {\r\n  id: string;\r\n  food_name: string;\r\n  calories: number;\r\n  protein: number;\r\n  carbs: number;\r\n  fat: number;\r\n  meal_time: string;\r\n  date: string;\r\n  created_at: string;\r\n  user_id: string;\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const cookieStore = await cookies();\r\n    const token = cookieStore.get(\"token\")?.value;\r\n\r\n    if (!token) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Nu ești autentificat\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\r\n    const { searchParams } = new URL(request.url);\r\n    const startDate = searchParams.get(\"start\");\r\n    const endDate = searchParams.get(\"end\");\r\n\r\n    if (!startDate || !endDate) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Datele de început și sfârșit sunt necesare\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Pentru demo, vom simula date\r\n    const mockEntries: FoodEntry[] = [\r\n      {\r\n        id: \"1\",\r\n        food_name: \"Ouă mici cu bacon\",\r\n        calories: 320,\r\n        protein: 25,\r\n        carbs: 5,\r\n        fat: 22,\r\n        meal_time: \"dimineata\",\r\n        date: \"2025-08-01\",\r\n        created_at: new Date().toISOString(),\r\n        user_id: decoded.userId,\r\n      },\r\n      {\r\n        id: \"2\",\r\n        food_name: \"Salată de pui cu avocado\",\r\n        calories: 450,\r\n        protein: 35,\r\n        carbs: 15,\r\n        fat: 28,\r\n        meal_time: \"amiaza\",\r\n        date: \"2025-08-01\",\r\n        created_at: new Date().toISOString(),\r\n        user_id: decoded.userId,\r\n      },\r\n      {\r\n        id: \"3\",\r\n        food_name: \"Somon la grătar cu broccoli\",\r\n        calories: 380,\r\n        protein: 40,\r\n        carbs: 12,\r\n        fat: 18,\r\n        meal_time: \"seara\",\r\n        date: \"2025-08-01\",\r\n        created_at: new Date().toISOString(),\r\n        user_id: decoded.userId,\r\n      },\r\n    ];\r\n\r\n    const entries = mockEntries;\r\n\r\n    if (entries.length === 0) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        analysis: null,\r\n      });\r\n    }\r\n\r\n    // Calculează statisticile\r\n    const totalEntries = entries.length;\r\n    const totalCalories = entries.reduce(\r\n      (sum: number, entry: FoodEntry) => sum + entry.calories,\r\n      0\r\n    );\r\n    const totalProtein = entries.reduce(\r\n      (sum: number, entry: FoodEntry) => sum + entry.protein,\r\n      0\r\n    );\r\n    const totalCarbs = entries.reduce(\r\n      (sum: number, entry: FoodEntry) => sum + entry.carbs,\r\n      0\r\n    );\r\n    const totalFat = entries.reduce(\r\n      (sum: number, entry: FoodEntry) => sum + entry.fat,\r\n      0\r\n    );\r\n\r\n    const avgCalories = totalCalories / totalEntries;\r\n    const avgProtein = totalProtein / totalEntries;\r\n    const avgCarbs = totalCarbs / totalEntries;\r\n    const avgFat = totalFat / totalEntries;\r\n\r\n    // Calculează distribuția macronutrienților\r\n    const totalMacros = totalProtein * 4 + totalCarbs * 4 + totalFat * 9;\r\n    const proteinPercent = ((totalProtein * 4) / totalMacros) * 100;\r\n    const carbsPercent = ((totalCarbs * 4) / totalMacros) * 100;\r\n    const fatPercent = ((totalFat * 9) / totalMacros) * 100;\r\n\r\n    // Găsește masa preferată\r\n    const mealTimes = entries.reduce(\r\n      (acc: Record<string, number>, entry: FoodEntry) => {\r\n        acc[entry.meal_time] = (acc[entry.meal_time] || 0) + 1;\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    const favoriteTime = Object.keys(mealTimes).reduce((a, b) =>\r\n      mealTimes[a] > mealTimes[b] ? a : b\r\n    );\r\n\r\n    // Top alimente\r\n    const foodCounts = entries.reduce(\r\n      (\r\n        acc: Record<\r\n          string,\r\n          { name: string; count: number; totalCalories: number }\r\n        >,\r\n        entry: FoodEntry\r\n      ) => {\r\n        const foodName = entry.food_name.toLowerCase();\r\n        if (!acc[foodName]) {\r\n          acc[foodName] = {\r\n            name: entry.food_name,\r\n            count: 0,\r\n            totalCalories: 0,\r\n          };\r\n        }\r\n        acc[foodName].count++;\r\n        acc[foodName].totalCalories += entry.calories;\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    const topFoods = Object.values(foodCounts)\r\n      .map((food: { name: string; count: number; totalCalories: number }) => ({\r\n        name: food.name,\r\n        count: food.count,\r\n        calories: Math.round(food.totalCalories / food.count),\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n\r\n    // Analiză dietă\r\n    let dietAnalysis = \"\";\r\n\r\n    if (proteinPercent > 30) {\r\n      dietAnalysis =\r\n        \"Dieta ta este bogată în proteine, ceea ce este excelent pentru menținerea masei musculare și sațietate. \";\r\n    } else if (proteinPercent < 15) {\r\n      dietAnalysis =\r\n        \"Aportul tău de proteine este scăzut. Încearcă să incluzi mai multe surse de proteine în dietă. \";\r\n    } else {\r\n      dietAnalysis = \"Aportul tău de proteine este în limitele normale. \";\r\n    }\r\n\r\n    if (carbsPercent > 60) {\r\n      dietAnalysis +=\r\n        \"Consumul de carbohidrați este ridicat - asigură-te că provind din surse complexe. \";\r\n    } else if (carbsPercent < 30) {\r\n      dietAnalysis +=\r\n        \"Urmezi o dietă low-carb, ceea ce poate fi benefic pentru pierderea în greutate. \";\r\n    }\r\n\r\n    if (fatPercent > 40) {\r\n      dietAnalysis +=\r\n        \"Aportul de grăsimi este ridicat - încearcă să te concentrezi pe grăsimi sănătoase. \";\r\n    }\r\n\r\n    dietAnalysis += `Analizând datele tale recente, ai înregistrat ${totalEntries} mese cu o medie de ${Math.round(\r\n      avgCalories\r\n    )} calorii pe intrare. Preferințele tale alimentare arată o înclinație către alimente bogate în proteine, ceea ce este benefic pentru obiectivele de fitness.`;\r\n\r\n    // Pattern săptămânal (simplificat)\r\n    const weeklyPattern = entries.reduce(\r\n      (acc: Record<string, number>, entry: FoodEntry) => {\r\n        const date = entry.date;\r\n        acc[date] = (acc[date] || 0) + entry.calories;\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    const analysis = {\r\n      totalEntries,\r\n      avgCalories: Math.round(avgCalories),\r\n      avgProtein: Math.round(avgProtein * 10) / 10,\r\n      avgCarbs: Math.round(avgCarbs * 10) / 10,\r\n      avgFat: Math.round(avgFat * 10) / 10,\r\n      favoriteTime,\r\n      topFoods,\r\n      macroDistribution: {\r\n        protein: Math.round(proteinPercent),\r\n        carbs: Math.round(carbsPercent),\r\n        fat: Math.round(fatPercent),\r\n      },\r\n      dietAnalysis,\r\n      weeklyPattern,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      analysis,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Eroare la încărcarea analizei:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Eroare la încărcarea analizei\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}