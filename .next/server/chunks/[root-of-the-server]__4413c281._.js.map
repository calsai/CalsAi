{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/food-journal-new/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const supabase = await createSupabaseServerClient();\r\n\r\n    // Verifică autentificarea\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n    }\r\n\r\n    const { action, entries, entryId } = await request.json();\r\n\r\n    if (action === \"confirm\") {\r\n      // Confirmă și adaugă intrările în jurnal\r\n      if (!entries || !Array.isArray(entries)) {\r\n        return NextResponse.json({ error: \"Invalid entries\" }, { status: 400 });\r\n      }\r\n\r\n      const entriesToInsert = entries.map((entry) => ({\r\n        user_id: user.id,\r\n        food_name: entry.food_name,\r\n        calories: entry.calories,\r\n        protein: entry.protein,\r\n        carbs: entry.carbs,\r\n        fat: entry.fat,\r\n        meal_time: entry.meal_time,\r\n        date: entry.date,\r\n        confirmed: true,\r\n      }));\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"food_entries\")\r\n        .insert(entriesToInsert)\r\n        .select();\r\n\r\n      if (error) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        entries: data,\r\n        message: \"Alimentele au fost adăugate în jurnal!\",\r\n      });\r\n    }\r\n\r\n    if (action === \"get\") {\r\n      // Obține intrările din jurnal pentru o zi specifică\r\n      const { date } = await request.json();\r\n      const targetDate = date || new Date().toISOString().split(\"T\")[0];\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"food_entries\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user.id)\r\n        .eq(\"date\", targetDate)\r\n        .eq(\"confirmed\", true)\r\n        .order(\"created_at\", { ascending: true });\r\n\r\n      if (error) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        entries: data || [],\r\n      });\r\n    }\r\n\r\n    if (action === \"delete\") {\r\n      // Șterge o intrare din jurnal\r\n      if (!entryId) {\r\n        return NextResponse.json(\r\n          { error: \"Entry ID is required\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from(\"food_entries\")\r\n        .delete()\r\n        .eq(\"id\", entryId)\r\n        .eq(\"user_id\", user.id); // Securitate: doar propriile intrări\r\n\r\n      if (error) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: \"Intrarea a fost ștearsă din jurnal\",\r\n      });\r\n    }\r\n\r\n    if (action === \"get_history\") {\r\n      // Obține istoricul ultimelor 30 de zile\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n      const dateFrom = thirtyDaysAgo.toISOString().split(\"T\")[0];\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"food_entries\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user.id)\r\n        .eq(\"confirmed\", true)\r\n        .gte(\"date\", dateFrom)\r\n        .order(\"date\", { ascending: false })\r\n        .order(\"created_at\", { ascending: true });\r\n\r\n      if (error) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 });\r\n      }\r\n\r\n      // Grupează pe zile\r\n      const groupedByDate = (data || []).reduce((acc, entry) => {\r\n        if (!acc[entry.date]) {\r\n          acc[entry.date] = [];\r\n        }\r\n        acc[entry.date].push(entry);\r\n        return acc;\r\n      }, {} as Record<string, any[]>);\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        history: groupedByDate,\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({ error: \"Invalid action\" }, { status: 400 });\r\n  } catch (error) {\r\n    console.error(\"Error in food journal:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"Technical error\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}