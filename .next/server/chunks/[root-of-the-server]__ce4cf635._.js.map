{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/natural-chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\n\r\n// Tipuri pentru date\r\ninterface FoodEntry {\r\n  name: string;\r\n  calories: number;\r\n  protein?: number;\r\n  carbs?: number;\r\n  fat?: number;\r\n  meal_time?: string;\r\n}\r\n\r\ninterface UserProfile {\r\n  user_id: string;\r\n  daily_calorie_goal?: number;\r\n  weight_goal?: string;\r\n  activity_level?: string;\r\n  full_name?: string;\r\n  age?: number;\r\n  weight?: number;\r\n  height?: number;\r\n  goal?: string;\r\n}\r\n\r\n// Funcție pentru analiza nutrițională cu Perplexity AI\r\nasync function analyzeNutritionWithAI(message: string) {\r\n  if (!process.env.PERPLEXITY_API_KEY) {\r\n    return null;\r\n  }\r\n\r\n  const nutritionPrompt = `\r\nAnalizează următorul mesaj și extrage informațiile nutriționale DOAR dacă sunt menționate alimente concrete cu cantități:\r\n\r\n\"${message}\"\r\n\r\nDacă găsești alimente cu cantități, răspunde DOAR cu un JSON valid în acest format:\r\n{\r\n  \"foods\": [\r\n    {\r\n      \"name\": \"nume aliment cu cantitate\",\r\n      \"calories\": număr_calorii,\r\n      \"protein\": grame_proteine,\r\n      \"carbs\": grame_carbohidrați,\r\n      \"fat\": grame_grăsimi,\r\n      \"meal_time\": \"dimineata|amiaza|seara\"\r\n    }\r\n  ]\r\n}\r\n\r\nDacă nu găsești alimente concrete cu cantități, răspunde DOAR cu:\r\n{\"foods\": []}\r\n\r\nFii foarte precis cu cantitățile și calculează nutrienții corect.`;\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.perplexity.ai/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"sonar\",\r\n        messages: [{ role: \"user\", content: nutritionPrompt }],\r\n        max_tokens: 500,\r\n        temperature: 0.1,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    const content = data.choices?.[0]?.message?.content || \"\";\r\n\r\n    // Extrage JSON din răspuns\r\n    const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\r\n    if (jsonMatch) {\r\n      const jsonData = JSON.parse(jsonMatch[0]);\r\n      return jsonData.foods || [];\r\n    }\r\n\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"AI nutrition analysis error:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// AI prompt natural pentru conversație\r\nasync function callPerplexityAPIForNaturalChat(\r\n  message: string,\r\n  detectedFoods: FoodEntry[],\r\n  userProfile: UserProfile | null,\r\n  conversationHistory: Array<{ role: string; content: string }> = []\r\n) {\r\n  if (!process.env.PERPLEXITY_API_KEY) {\r\n    return \"Îmi pare rău, nu am acces la serviciul AI momentan.\";\r\n  }\r\n\r\n  const firstName = userProfile?.full_name?.split(\" \")[0] || \"prietene\";\r\n  const currentHour = new Date().getHours();\r\n  let contextualGreeting = \"\";\r\n\r\n  if (currentHour < 12) contextualGreeting = \"dimineața\";\r\n  else if (currentHour < 18) contextualGreeting = \"la prânz\";\r\n  else contextualGreeting = \"seara\";\r\n\r\n  let naturalPrompt = `Ești Alex, antrenorul personal și nutriționistul lui ${firstName}. Aveți o relație de încredere construită în timp. Nu spui că ești un AI - vorbești ca un ADEVĂRAT ANTRENOR care își cunoaște clientul.\r\n\r\nMESAJUL LUI ${firstName.toUpperCase()}: \"${message}\"\r\n\r\nPERSONALITATEA TA ALEX:\r\n� Profesionist dar prietenos - vorbești direct și clar\r\n💪 Motivational și pozitiv - înțelegi provocările lui ${firstName}\r\n🧠 Expert cu experiență reală - dai sfaturi testate și practice\r\n❤️ Îți pasă cu adevărat de progresul și sănătatea lui ${firstName}\r\n\r\nCONTEXTUL VOSTRU:\r\n• Lucrați împreună la obiectivele lui ${firstName}\r\n• Ai înțelegere completă despre situația și preferințele lui\r\n• Răspunzi ca și cum ați fi discutat face-to-face de multe ori\r\n• Nu repeți informații de bază - dezvolți planurile existente\r\n• Faci referiri la progresul și conversațiile anterioare când e relevant`;\r\n\r\n  if (detectedFoods.length > 0) {\r\n    naturalPrompt += `\\n\\n🍽️ ${firstName.toUpperCase()} A MÂNCAT ASTĂZI:\\n`;\r\n    naturalPrompt += detectedFoods\r\n      .map(\r\n        (f) =>\r\n          `✓ ${f.name} → ${f.calories} cal, ${f.protein}g proteine, ${f.carbs}g carbo, ${f.fat}g grăsimi`\r\n      )\r\n      .join(\"\\n\");\r\n    naturalPrompt += `\\n\\nANALIZEAZĂ ACEST MEAL ȘI DĂ FEEDBACK DETALIAT!`;\r\n  }\r\n\r\n  if (userProfile) {\r\n    naturalPrompt += `\\n\\n📋 PROFILUL CLIENTULUI ${firstName.toUpperCase()}:\r\n🎯 Obiectiv principal: ${\r\n      userProfile.goal === \"lose\"\r\n        ? \"SLĂBIRE - deficit caloric controlat\"\r\n        : userProfile.goal === \"gain\"\r\n        ? \"CREȘTERE ÎN MASĂ - surplus caloric + antrenament\"\r\n        : \"MENȚINERE - recompoziție corporală\"\r\n    }\r\n📊 Target zilnic: ${\r\n      userProfile.daily_calorie_goal || \"NECALCULAT - PRIORITATE!\"\r\n    } calorii\r\n👤 Stats: ${userProfile.age || \"?\"}ani, ${userProfile.weight || \"?\"}kg, ${\r\n      userProfile.height || \"?\"\r\n    }cm\r\n🏃 Activitate: ${userProfile.activity_level || \"nespecificată\"}\r\n\r\n${\r\n  !userProfile.daily_calorie_goal\r\n    ? \"⚠️ LIPSEȘTE CALCULUL CALORIC - trebuie stabilit urgent!\"\r\n    : \"\"\r\n}`;\r\n  }\r\n\r\n  if (conversationHistory.length > 0) {\r\n    naturalPrompt += `\\n\\n� CONTEXT DIN CONVERSAȚIILE VOASTRE RECENTE:`;\r\n    naturalPrompt += conversationHistory\r\n      .slice(-4)\r\n      .map(\r\n        (h) =>\r\n          `\\n• ${\r\n            h.role === \"user\" ? `${firstName}` : \"Tu (Alex)\"\r\n          }: ${h.content.substring(0, 150)}...`\r\n      )\r\n      .join(\"\");\r\n    naturalPrompt += `\\n\\n↗️ CONTINUĂ CONVERSAȚIA NATURAL ȘI REFERĂ-TE LA DISCUȚIILE ANTERIOARE!`;\r\n  }\r\n\r\n  naturalPrompt += `\\n\\n🎯 INSTRUCȚIUNI PENTRU RĂSPUNSUL TĂU ALEX:\r\n\r\nSTILUL CONVERSAȚIEI:\r\n• Vorbește natural, ca și cum v-ați întâlni în sala de sport\r\n• Fii specific și personal - nu da sfaturi generice\r\n• Folosește experiența voastră comună și progresul lui ${firstName}\r\n• Răspunsuri de 300-600 de cuvinte pentru consultanță completă\r\n• Emojis pentru structură și energie pozitivă\r\n\r\nCONȚINUTUL RĂSPUNSULUI:\r\n� Analizează situația actuală în detaliu\r\n💡 Sfaturi concrete și actionabile pentru următoarele 24-48h\r\n🎯 Planuri specifice adaptate la ${firstName}\r\n❓ Întrebări pentru a continua progresul\r\n🔥 Motivație și încurajare personalizată\r\n\r\nNEVER:\r\n❌ Nu spui că ești un AI sau sistem automatizat\r\n❌ Nu repeți informații de bază pe care le știți deja\r\n❌ Nu dai sfaturi generice - totul specific pentru ${firstName}\r\n❌ Nu menționezi că \"nu poți\" - găsești soluții creative\r\n\r\nCONTEXTUL ZILEI: E ${contextualGreeting} - adaptează sfaturile la momentul zilei\r\n\r\nRĂSPUNDE NATURAL ÎN ROMÂNĂ, ca antrenorul personal care ești pentru ${firstName}!`;\r\n\r\n  try {\r\n    console.log(\"🔗 Sending request to Perplexity...\");\r\n    const response = await fetch(\"https://api.perplexity.ai/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"sonar\",\r\n        messages: [{ role: \"user\", content: naturalPrompt }],\r\n        max_tokens: 1000,\r\n        temperature: 0.7,\r\n        top_p: 0.9,\r\n      }),\r\n    });\r\n\r\n    console.log(\"📡 Perplexity response status:\", response.status);\r\n    const data = await response.json();\r\n    console.log(\"📋 Perplexity data:\", data);\r\n\r\n    const aiResponse =\r\n      data.choices?.[0]?.message?.content ||\r\n      \"Îmi pare rău, nu am putut procesa răspunsul.\";\r\n\r\n    console.log(\"✅ Final AI response:\", aiResponse);\r\n    return aiResponse;\r\n  } catch (error) {\r\n    console.error(\"❌ Error calling Perplexity API:\", error);\r\n    return \"Îmi pare rău, am întâmpinat o problemă tehnică. Te rog să încerci din nou.\";\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Pentru acum returnăm o listă goală până când tabelele sunt create\r\n    return NextResponse.json({\r\n      success: true,\r\n      messages: [],\r\n      session_id: null,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in natural chat GET:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"A apărut o eroare la încărcarea conversației\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { message, session_id, user_profile, conversation_history } =\r\n      await request.json();\r\n\r\n    if (!message || !message.trim()) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Mesajul nu poate fi gol\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verifică autentificarea\r\n    const supabase = await createSupabaseServerClient();\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Nu ești autentificat\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // TEMPORAR: Nu salvăm mesajul utilizatorului până când tabelele sunt create\r\n    // const userMessageData = {\r\n    //   user_id: user.id,\r\n    //   session_id: session_id || `session_${Date.now()}`,\r\n    //   message: message.trim(),\r\n    //   is_user: true,\r\n    //   created_at: new Date().toISOString()\r\n    // };\r\n    // await supabase.from('chat_messages').insert(userMessageData);\r\n\r\n    // Analizează alimentele din mesaj\r\n    console.log(\"📝 Analyzing message:\", message.trim());\r\n    const detectedFoods = (await analyzeNutritionWithAI(message.trim())) || [];\r\n    console.log(\"🍽️ Detected foods:\", detectedFoods);\r\n\r\n    // Generează răspunsul AI\r\n    console.log(\"🤖 Calling Perplexity AI...\");\r\n    const aiResponse = await callPerplexityAPIForNaturalChat(\r\n      message.trim(),\r\n      detectedFoods,\r\n      user_profile,\r\n      conversation_history || []\r\n    );\r\n    console.log(\"💬 AI Response:\", aiResponse);\r\n\r\n    // TEMPORAR: Nu salvăm în chat_messages până când tabelele sunt create\r\n    // const aiMessageData = {\r\n    //   user_id: user.id,\r\n    //   session_id: session_id || `session_${Date.now()}`,\r\n    //   message: aiResponse,\r\n    //   is_user: false,\r\n    //   created_at: new Date().toISOString(),\r\n    // };\r\n    // await supabase.from(\"chat_messages\").insert(aiMessageData);\r\n\r\n    // Pregătește intrările pentru jurnal dacă sunt alimente detectate\r\n    const pendingEntries = detectedFoods.map((food: FoodEntry) => ({\r\n      food_name: food.name,\r\n      calories: food.calories,\r\n      protein: food.protein || 0,\r\n      carbs: food.carbs || 0,\r\n      fat: food.fat || 0,\r\n      meal_time: food.meal_time || \"amiaza\",\r\n      date: new Date().toISOString().split(\"T\")[0],\r\n    }));\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      response: aiResponse,\r\n      pending_entries: pendingEntries,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in natural chat POST:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"A apărut o eroare la procesarea mesajului\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}