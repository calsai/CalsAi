{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/recipe-generator/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const {\r\n      preferences,\r\n      meal_type,\r\n      time_limit,\r\n      available_ingredients,\r\n      user_profile,\r\n    } = await request.json();\r\n\r\n    // Verifică autentificarea\r\n    const supabase = await createSupabaseServerClient();\r\n    const {\r\n      data: { user },\r\n      error: authError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (authError || !user) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Nu ești autentificat\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    if (!preferences?.trim()) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Te rog să descrii ce fel de rețetă vrei\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Construiește prompt-ul pentru AI\r\n    const userInfo = user_profile\r\n      ? `\r\nInformații despre utilizator:\r\n- Vârsta: ${user_profile.age} ani\r\n- Greutatea: ${user_profile.weight} kg\r\n- Înălțimea: ${user_profile.height} cm\r\n- Sexul: ${user_profile.gender === \"male\" ? \"masculin\" : \"feminin\"}\r\n- Nivelul de activitate: ${user_profile.activity_level}\r\n- Obiectivul: ${\r\n          user_profile.goal === \"lose\"\r\n            ? \"slăbire\"\r\n            : user_profile.goal === \"gain\"\r\n            ? \"creștere în greutate\"\r\n            : \"menținere\"\r\n        }\r\n- Necesarul caloric zilnic: ${user_profile.daily_calorie_goal} kcal\r\n`\r\n      : \"\";\r\n\r\n    const timeConstraint = time_limit\r\n      ? `\\n- Timpul maxim de preparare + gătire: ${time_limit} minute`\r\n      : \"\";\r\n    const ingredientsConstraint = available_ingredients\r\n      ? `\\n- Ingrediente disponibile: ${available_ingredients}`\r\n      : \"\";\r\n    const mealTypeConstraint =\r\n      meal_type && meal_type !== \"orice\" ? `\\n- Tipul mesei: ${meal_type}` : \"\";\r\n\r\n    const prompt = `Ești un chef profesionist și nutriționist român. Generează o rețetă detaliată bazată pe următoarele cerințe:\r\n\r\nCERINȚA UTILIZATORULUI: \"${preferences}\"\r\n\r\nCONSTRÂNGERI:${mealTypeConstraint}${timeConstraint}${ingredientsConstraint}\r\n\r\n${userInfo}\r\n\r\nTe rog să generezi o rețetă care să fie:\r\n1. Adaptată culturii culinare românești\r\n2. Sănătoasă și echilibrată nutrițional\r\n3. Practică pentru preparare acasă\r\n4. Adaptată obiectivelor utilizatorului\r\n\r\nRăspunde EXACT în următorul format JSON (fără text suplimentar):\r\n\r\n{\r\n  \"name\": \"Numele rețetei în română\",\r\n  \"description\": \"O descriere scurtă și atrăgătoare a rețetei\",\r\n  \"prep_time\": [numărul de minute pentru preparare],\r\n  \"cook_time\": [numărul de minute pentru gătire],\r\n  \"servings\": [numărul de porții],\r\n  \"calories_per_serving\": [caloriile per porție],\r\n  \"protein_per_serving\": [gramele de proteine per porție],\r\n  \"carbs_per_serving\": [gramele de carbohidrați per porție],\r\n  \"fat_per_serving\": [gramele de grăsimi per porție],\r\n  \"ingredients\": [\r\n    \"ingredient 1 cu cantitatea exactă\",\r\n    \"ingredient 2 cu cantitatea exactă\",\r\n    \"...\"\r\n  ],\r\n  \"instructions\": [\r\n    \"Pasul 1 detaliat\",\r\n    \"Pasul 2 detaliat\",\r\n    \"...\"\r\n  ],\r\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"]\r\n}`;\r\n\r\n    // Apelează AI-ul\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n    const result = await model.generateContent(prompt);\r\n    const aiResponse = result.response.text();\r\n\r\n    // Parseaza răspunsul JSON\r\n    let recipe;\r\n    try {\r\n      // Extrage JSON din răspuns (în caz că AI-ul adaugă text suplimentar)\r\n      const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\r\n      if (!jsonMatch) {\r\n        throw new Error(\"Nu s-a putut extrage JSON din răspuns\");\r\n      }\r\n      recipe = JSON.parse(jsonMatch[0]);\r\n    } catch (parseError) {\r\n      console.error(\"Error parsing AI response:\", parseError);\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error:\r\n            \"Nu am putut genera rețeta. Te rog să încerci din nou cu o descriere mai specifică.\",\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Validează datele rețetei\r\n    if (!recipe.name || !recipe.ingredients || !recipe.instructions) {\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: \"Rețeta generată este incompletă. Te rog să încerci din nou.\",\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Salvează rețeta în baza de date\r\n    const { error: insertError } = await supabase.from(\"recipes\").insert({\r\n      user_id: user.id,\r\n      name: recipe.name,\r\n      description: recipe.description,\r\n      prep_time: recipe.prep_time || 0,\r\n      cook_time: recipe.cook_time || 0,\r\n      servings: recipe.servings || 1,\r\n      calories_per_serving: recipe.calories_per_serving || 0,\r\n      protein_per_serving: recipe.protein_per_serving || 0,\r\n      carbs_per_serving: recipe.carbs_per_serving || 0,\r\n      fat_per_serving: recipe.fat_per_serving || 0,\r\n      ingredients: recipe.ingredients,\r\n      instructions: recipe.instructions,\r\n      tags: recipe.tags || [],\r\n      ai_generated: true,\r\n      prompt_used: preferences,\r\n    });\r\n\r\n    if (insertError) {\r\n      console.error(\"Error saving recipe:\", insertError);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      recipe: recipe,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in recipe generator:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"A apărut o eroare la generarea rețetei\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}