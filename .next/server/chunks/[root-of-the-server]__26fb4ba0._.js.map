{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\n// Client pentru server components - folosit doar pe server\r\nexport const createSupabaseServerClient = async () => {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll();\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) => {\r\n              cookieStore.set(name, value, options);\r\n            });\r\n          } catch {\r\n            // Ignores the error when cookies cannot be set during SSR\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAGO,MAAM,6BAA6B;IACxC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;oBAC/B;gBACF,EAAE,OAAM;gBACN,0DAA0D;gBAC5D;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alexx/OneDrive/Desktop/cals/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createSupabaseServerClient } from \"@/lib/supabase-server\";\r\n\r\n// Func»õie pentru analiza nutri»õionalƒÉ cu Perplexity AI\r\nasync function analyzeNutritionWithAI(message: string) {\r\n  if (!process.env.PERPLEXITY_API_KEY) {\r\n    return null;\r\n  }\r\n\r\n  const nutritionPrompt = `\r\nAnalizeazƒÉ urmƒÉtorul mesaj »ôi extrage informa»õiile nutri»õionale DOAR dacƒÉ sunt men»õionate alimente concrete cu cantitƒÉ»õi:\r\n\r\n\"${message}\"\r\n\r\nDacƒÉ gƒÉse»ôti alimente cu cantitƒÉ»õi, rƒÉspunde DOAR cu un JSON valid √Æn acest format:\r\n{\r\n  \"foods\": [\r\n    {\r\n      \"name\": \"nume aliment cu cantitate\",\r\n      \"calories\": numƒÉr_calorii,\r\n      \"protein\": grame_proteine,\r\n      \"carbs\": grame_carbohidra»õi,\r\n      \"fat\": grame_grƒÉsimi,\r\n      \"meal_time\": \"dimineata|amiaza|seara\"\r\n    }\r\n  ]\r\n}\r\n\r\nDacƒÉ NU gƒÉse»ôti alimente concrete cu cantitƒÉ»õi, rƒÉspunde cu:\r\n{\"foods\": []}\r\n\r\nCalculeazƒÉ valorile nutri»õionale realiste »ôi precise. Nu inventa date.\r\n`;\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.perplexity.ai/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"sonar\",\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: \"E»ôti un expert nutri»õionist care analizeazƒÉ mesajele pentru extragerea precisƒÉ a informa»õiilor nutri»õionale. RƒÉspunzi DOAR cu JSON valid.\"\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: nutritionPrompt,\r\n          },\r\n        ],\r\n        temperature: 0.3,\r\n        max_tokens: 500,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Perplexity nutrition analysis error:\", response.status);\r\n      return null;\r\n    }\r\n\r\n    const data = await response.json();\r\n    const aiResponse = data.choices[0]?.message?.content;\r\n    \r\n    if (!aiResponse) return null;\r\n\r\n    // √éncearcƒÉ sƒÉ parseze JSON-ul returnat de AI\r\n    try {\r\n      const nutritionData = JSON.parse(aiResponse.trim());\r\n      return nutritionData.foods || [];\r\n    } catch (parseError) {\r\n      console.error(\"Failed to parse AI nutrition response:\", parseError);\r\n      return null;\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"AI nutrition analysis error:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Func»õie pentru apelul cƒÉtre Perplexity API cu fetch direct\r\nasync function callPerplexityAPI(message: string) {\r\n  console.log(\"PERPLEXITY_API_KEY:\", process.env.PERPLEXITY_API_KEY ? \"SET\" : \"NOT SET\");\r\n  console.log(\"Token length:\", process.env.PERPLEXITY_API_KEY?.length || 0);\r\n\r\n  if (!process.env.PERPLEXITY_API_KEY) {\r\n    return \"√émi pare rƒÉu, nu am acces la serviciul AI momentan. Te rog sƒÉ verifici configura»õia.\";\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      \"https://api.perplexity.ai/chat/completions\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"sonar\",\r\n          messages: [\r\n            {\r\n              role: \"system\",\r\n              content:\r\n                \"E»ôti un coach personal de nutri»õie profesional »ôi expert √Æn rom√¢nƒÉ. Vorbe»ôti profesional »ôi prietenos, e»ôti motivant dar echilibrat, dai sfaturi practice »ôi bazate pe »ôtiin»õƒÉ, e»ôti empatic »ôi √Æn»õelegƒÉtor.\",\r\n            },\r\n            {\r\n              role: \"user\",\r\n              content: message,\r\n            },\r\n          ],\r\n          temperature: 0.7,\r\n          max_tokens: 300,\r\n        }),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Perplexity API error:\", response.status, response.statusText);\r\n      const errorText = await response.text();\r\n      console.error(\"Error details:\", errorText);\r\n      return \"√émi pare rƒÉu, am o problemƒÉ tehnicƒÉ. Te rog √ÆncearcƒÉ din nou! üòî\";\r\n    }\r\n\r\n    const data = await response.json();\r\n    return (\r\n      data.choices[0]?.message?.content || \"Nu am putut genera un rƒÉspuns.\"\r\n    );\r\n  } catch (error) {\r\n    console.error(\"GitHub AI API error:\", error);\r\n    return \"√émi pare rƒÉu, am o problemƒÉ tehnicƒÉ. Te rog √ÆncearcƒÉ din nou! üòî\";\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { message } = await request.json();\r\n\r\n    if (!message?.trim()) {\r\n      return NextResponse.json(\r\n        { error: \"Message is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // √éncearcƒÉ sƒÉ ob»õii utilizatorul autentificat pentru salvare (op»õional)\r\n    const supabase = await createSupabaseServerClient();\r\n    const {\r\n      data: { user },\r\n    } = await supabase.auth.getUser();\r\n\r\n    // AnalizeazƒÉ mesajul cu AI pentru extragerea informa»õiilor nutri»õionale\r\n    const detectedFoods = await analyzeNutritionWithAI(message);\r\n\r\n    // DacƒÉ utilizatorul este autentificat »ôi AI-ul a detectat alimente, salveazƒÉ-le\r\n    if (user && detectedFoods && detectedFoods.length > 0) {\r\n      const journalEntries = detectedFoods.map((food: any) => ({\r\n        user_id: user.id,\r\n        food_name: food.name,\r\n        calories: food.calories,\r\n        protein: food.protein,\r\n        carbs: food.carbs,\r\n        fat: food.fat,\r\n        meal_time: food.meal_time,\r\n        date: new Date().toISOString().split(\"T\")[0],\r\n        confirmed: true,\r\n      }));\r\n\r\n      // SalveazƒÉ √Æn jurnal\r\n      await supabase.from(\"food_journal_entries\").insert(journalEntries);\r\n    }\r\n\r\n    // ApeleazƒÉ Perplexity AI pentru rƒÉspunsul conversa»õional\r\n    const aiResponse = await callPerplexityAPI(message);\r\n\r\n    return NextResponse.json({\r\n      response: aiResponse,\r\n      success: true,\r\n      foodsDetected: detectedFoods ? detectedFoods.length > 0 : false,\r\n      savedEntries: user && detectedFoods ? detectedFoods : [],\r\n    });\r\n  } catch (error: any) {\r\n    console.error(\"Error in chat:\", error);\r\n\r\n    // Fallback rƒÉspuns dacƒÉ AI nu func»õioneazƒÉ\r\n    const fallbackResponses = [\r\n      \"√émi pare rƒÉu, am o problemƒÉ tehnicƒÉ momentan. Pot sƒÉ te ajut cu ceva simplu despre nutri»õie? üçé\",\r\n      \"Nu reu»ôesc sƒÉ mƒÉ conectez la serviciul AI acum. Ce √Æntrebare ai despre alimenta»õia sƒÉnƒÉtoasƒÉ? ü•ó\",\r\n      \"Am o micƒÉ problemƒÉ tehnicƒÉ. Spune-mi ce vrei sƒÉ »ôtii despre dietƒÉ »ôi √Æ»õi rƒÉspund! üí™\",\r\n    ];\r\n\r\n    return NextResponse.json({\r\n      response:\r\n        fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)],\r\n      success: false,\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}